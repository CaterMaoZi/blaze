#ifndef CODEC_H
#define CODEC_H

#include <stddef.h>
#include <stdint.h>
#include <assert.h>

// @NOTE(traks) apparently tracy includes headers that define MIN/MAX, so define
// them here in advance to prevent warnings
#define MIN(a, b) ((a) < (b) ? (a) : (b))

#define MAX(a, b) ((a) > (b) ? (a) : (b))

#ifdef PROFILE

#include <tracy/TracyC.h>

extern TracyCZoneCtx tracy_contexts[64];
extern int tracy_context_count;

#define begin_timed_block(name) \
    do { \
        int tracy_i = tracy_context_count; \
        tracy_context_count++; \
        TracyCZoneNS(ctx, name, 10, 1); \
        tracy_contexts[tracy_i] = ctx; \
    } while (0)

#define end_timed_block() \
    do { \
        tracy_context_count--; \
        TracyCZoneCtx ctx = tracy_contexts[tracy_context_count]; \
        TracyCZoneEnd(ctx); \
    } while (0)

#else

#define begin_timed_block(name)
#define end_timed_block()

#endif // PROFILE

#define ARRAY_SIZE(x) (sizeof (x) / sizeof *(x))

#define ABS(a) ((a) < 0 ? -(a) : (a))

#define CLAMP(x, l, u) (MAX(MIN((x), (u)), (l)))

#define PI (3.141592653589f)

#define DEGREES_PER_RADIAN (360.0f / (2.0f * PI))

#define RADIANS_PER_DEGREE ((2.0f * PI) / 360.0f)

#define SERVER_PROTOCOL_VERSION (756)

#define SERVER_WORLD_VERSION (2730)

typedef int8_t i8;
typedef int16_t i16;
typedef int32_t i32;
typedef int64_t i64;
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
typedef uint64_t u64;
// @NOTE(traks) assumed to be encoded as IEEE 754 binary32 and binary64
typedef float f32;
typedef double f64;

typedef struct {
    u8 * data;
    i32 size;
    i32 index;
} MemoryArena;

typedef struct {
    i32 x;
    i32 y;
    i32 z;
} BlockPos;

typedef struct {
    u8 * data;
    i32 size;
} String;

#define STR(x) ((String) {.size = strlen(x), .data = (u8 *) (x)})

#define MAX_CHUNK_CACHE_RADIUS (10)

#define MAX_CHUNK_CACHE_DIAM (2 * MAX_CHUNK_CACHE_RADIUS + 1)

#define KEEP_ALIVE_SPACING (10 * 20)

#define KEEP_ALIVE_TIMEOUT (30 * 20)

#define MAX_CHUNK_SENDS_PER_TICK (2)

#define MAX_CHUNK_LOADS_PER_TICK (2)

// must be power of 2
#define MAX_ENTITIES (1024)

#define MAX_PLAYERS (100)

// whether all play packets should be compressed or not
#define PACKET_COMPRESSION_ENABLED (1)

#define MAX_WORLD_Y (255)

// in network id order
enum gamemode {
    GAMEMODE_SURVIVAL,
    GAMEMODE_CREATIVE,
    GAMEMODE_ADVENTURE,
    GAMEMODE_SPECTATOR,
};

// @NOTE(traks) I think of the Minecraft coordinate system as follows:
//
//        +Y
//        |
//        |
//        *---- +X (270 degrees)
//       /
//      /
//     +Z (0 degrees)
//
// Then north naturally corresponds to -Z, east to +X, etc. However, entity
// rotations along the Y axis are the opposite to what you might expect: adding
// degrees rotates clockwise instead of counter-clockwise (as is common in
// mathematics).

// in network id order
enum direction {
    DIRECTION_NEG_Y, // down
    DIRECTION_POS_Y, // up
    DIRECTION_NEG_Z, // north
    DIRECTION_POS_Z, // south
    DIRECTION_NEG_X, // west
    DIRECTION_POS_X, // east
    DIRECTION_ZERO, // not used in network
};

enum dye_colour {
    DYE_COLOUR_WHITE,
    DYE_COLOUR_ORANGE,
    DYE_COLOUR_MAGENTA,
    DYE_COLOUR_LIGHT_BLUE,
    DYE_COLOUR_YELLOW,
    DYE_COLOUR_LIME,
    DYE_COLOUR_PINK,
    DYE_COLOUR_GRAY,
    DYE_COLOUR_LIGHT_GRAY,
    DYE_COLOUR_CYAN,
    DYE_COLOUR_PURPLE,
    DYE_COLOUR_BLUE,
    DYE_COLOUR_BROWN,
    DYE_COLOUR_GREEN,
    DYE_COLOUR_RED,
    DYE_COLOUR_BLACK,
};

typedef struct {
    i16 x;
    i16 z;
} chunk_pos;

#define CHUNK_LOADED (1u << 0)

typedef struct {
    int index_in_bucket;
    u16 block_states[4096];
} chunk_section;

#define CHUNK_SECTIONS_PER_BUCKET (64)

typedef struct chunk_section_bucket chunk_section_bucket;

struct chunk_section_bucket {
    chunk_section chunk_sections[CHUNK_SECTIONS_PER_BUCKET];
    // @TODO(traks) we use 2 * CHUNK_SECTIONS_PER_BUCKET 4096-byte pages for the
    // block states in the chunk sections. How much of the next page do we use?
    chunk_section_bucket * next;
    chunk_section_bucket * prev;
    int used_sections;
    // @TODO(traks) store this in longs?
    unsigned char used_map[CHUNK_SECTIONS_PER_BUCKET];
};

typedef struct {
    u16 x:4;
    u16 y:8;
    u16 z:4;
} compact_chunk_block_pos;

enum block_entity_type {
    BLOCK_ENTITY_NULL,
    BLOCK_ENTITY_BANNER,
    BLOCK_ENTITY_BARREL,
    BLOCK_ENTITY_BEACON,
    BLOCK_ENTITY_BED,
    BLOCK_ENTITY_BEEHIVE,
    BLOCK_ENTITY_BELL,
    BLOCK_ENTITY_BLAST_FURNACE,
    BLOCK_ENTITY_BREWING_STAND,
    BLOCK_ENTITY_CAMPFIRE,
    BLOCK_ENTITY_CHEST,
    BLOCK_ENTITY_COMMAND_BLOCK,
    BLOCK_ENTITY_COMPARATOR,
    BLOCK_ENTITY_CONDUIT,
    BLOCK_ENTITY_DAYLIGHT_DETECTOR,
    BLOCK_ENTITY_DISPENSER,
    BLOCK_ENTITY_DROPPER,
    BLOCK_ENTITY_ENCHANTING_TABLE,
    BLOCK_ENTITY_ENDER_CHEST,
    BLOCK_ENTITY_FURNACE,
    BLOCK_ENTITY_HOPPER,
    BLOCK_ENTITY_JIGSAW,
    BLOCK_ENTITY_JUKEBOX,
    BLOCK_ENTITY_LECTERN,
    BLOCK_ENTITY_MOVING_PISTON,
    BLOCK_ENTITY_SCULK_SENSOR,
    BLOCK_ENTITY_SHULKER_BOX,
    BLOCK_ENTITY_SIGN,
    BLOCK_ENTITY_SKULL,
    BLOCK_ENTITY_SMOKER,
    BLOCK_ENTITY_SPAWNER,
    BLOCK_ENTITY_STRUCTURE_BLOCK,
    BLOCK_ENTITY_END_GATEWAY,
    BLOCK_ENTITY_END_PORTAL,
    BLOCK_ENTITY_TRAPPED_CHEST,
};

typedef struct {
    unsigned char dye_colour;
} block_entity_bed;

#define BLOCK_ENTITY_IN_USE ((unsigned char) (1 << 0))

typedef struct {
    unsigned char type;
    unsigned char flags;
    compact_chunk_block_pos pos;

    union {
        block_entity_bed bed;
    };
} block_entity_base;

typedef struct {
    int type;
    BlockPos pos;
    i32 data;
} level_event;

typedef struct {
    // @TODO(traks) allow more than 16 sections. Note that other parts of the
    // code will have to be updated as well (such as chunk sending and light
    // update sending).
    chunk_section * sections[16];
    u16 non_air_count[16];
    // need shorts to store 257 different heights
    u16 motion_blocking_height_map[256];

    // increment if you want to keep a chunk available in the map, decrement
    // if you no longer care for the chunk.
    // If = 0 the chunk will be removed from the map at some point.
    u32 available_interest;
    unsigned flags;

    // @TODO(traks) more changed blocks, better compression. Can become very
    // large due to redstone updates, carpet towers breaking, etc. This should
    // probably grow dynamically. An alternative would be to store a bit array
    // with a 1 if a block changed and a 0 otherwise. However, that has massive
    // memory overhead.
    compact_chunk_block_pos changed_blocks[200];
    u8 changed_block_count;

    // @TODO(traks) allow more block entities. Possibly use an internally
    // chained hashmap for this. The question is, where do we allocate this
    // hashmap in? We may need some more general-purpose allocator. Could
    // restrict to allocation sizes of 2^13, 2^12, 2^11, etc. and have separate
    // linked lists for each. Maybe pull blocks from 2^13 list to 2^12 list,
    // from 2^12 list to 2^11, etc. when they need more memory.

    // @TODO(traks) flesh out all this block entity business. What if getting
    // block entity fails? Remove block entities if block gets removed. Load
    // block entities from region files. Send block entities to players. Send
    // block entity updates to players.
    block_entity_base block_entities[10];

    level_event local_events[64];
    u8 local_event_count;
} chunk;

#define CHUNKS_PER_BUCKET (32)

#define CHUNK_MAP_SIZE (1024)

typedef struct chunk_bucket chunk_bucket;

struct chunk_bucket {
    chunk_bucket * next_bucket;
    int size;
    chunk_pos positions[CHUNKS_PER_BUCKET];
    chunk chunks[CHUNKS_PER_BUCKET];
};

enum block_type {
    BLOCK_AIR,
    BLOCK_STONE,
    BLOCK_GRANITE,
    BLOCK_POLISHED_GRANITE,
    BLOCK_DIORITE,
    BLOCK_POLISHED_DIORITE,
    BLOCK_ANDESITE,
    BLOCK_POLISHED_ANDESITE,
    BLOCK_GRASS_BLOCK,
    BLOCK_DIRT,
    BLOCK_COARSE_DIRT,
    BLOCK_PODZOL,
    BLOCK_COBBLESTONE,
    BLOCK_OAK_PLANKS,
    BLOCK_SPRUCE_PLANKS,
    BLOCK_BIRCH_PLANKS,
    BLOCK_JUNGLE_PLANKS,
    BLOCK_ACACIA_PLANKS,
    BLOCK_DARK_OAK_PLANKS,
    BLOCK_OAK_SAPLING,
    BLOCK_SPRUCE_SAPLING,
    BLOCK_BIRCH_SAPLING,
    BLOCK_JUNGLE_SAPLING,
    BLOCK_ACACIA_SAPLING,
    BLOCK_DARK_OAK_SAPLING,
    BLOCK_BEDROCK,
    BLOCK_WATER,
    BLOCK_LAVA,
    BLOCK_SAND,
    BLOCK_RED_SAND,
    BLOCK_GRAVEL,
    BLOCK_GOLD_ORE,
    BLOCK_DEEPSLATE_GOLD_ORE,
    BLOCK_IRON_ORE,
    BLOCK_DEEPSLATE_IRON_ORE,
    BLOCK_COAL_ORE,
    BLOCK_DEEPSLATE_COAL_ORE,
    BLOCK_NETHER_GOLD_ORE,
    BLOCK_OAK_LOG,
    BLOCK_SPRUCE_LOG,
    BLOCK_BIRCH_LOG,
    BLOCK_JUNGLE_LOG,
    BLOCK_ACACIA_LOG,
    BLOCK_DARK_OAK_LOG,
    BLOCK_STRIPPED_SPRUCE_LOG,
    BLOCK_STRIPPED_BIRCH_LOG,
    BLOCK_STRIPPED_JUNGLE_LOG,
    BLOCK_STRIPPED_ACACIA_LOG,
    BLOCK_STRIPPED_DARK_OAK_LOG,
    BLOCK_STRIPPED_OAK_LOG,
    BLOCK_OAK_WOOD,
    BLOCK_SPRUCE_WOOD,
    BLOCK_BIRCH_WOOD,
    BLOCK_JUNGLE_WOOD,
    BLOCK_ACACIA_WOOD,
    BLOCK_DARK_OAK_WOOD,
    BLOCK_STRIPPED_OAK_WOOD,
    BLOCK_STRIPPED_SPRUCE_WOOD,
    BLOCK_STRIPPED_BIRCH_WOOD,
    BLOCK_STRIPPED_JUNGLE_WOOD,
    BLOCK_STRIPPED_ACACIA_WOOD,
    BLOCK_STRIPPED_DARK_OAK_WOOD,
    BLOCK_OAK_LEAVES,
    BLOCK_SPRUCE_LEAVES,
    BLOCK_BIRCH_LEAVES,
    BLOCK_JUNGLE_LEAVES,
    BLOCK_ACACIA_LEAVES,
    BLOCK_DARK_OAK_LEAVES,
    BLOCK_AZALEA_LEAVES,
    BLOCK_FLOWERING_AZALEA_LEAVES,
    BLOCK_SPONGE,
    BLOCK_WET_SPONGE,
    BLOCK_GLASS,
    BLOCK_LAPIS_ORE,
    BLOCK_DEEPSLATE_LAPIS_ORE,
    BLOCK_LAPIS_BLOCK,
    BLOCK_DISPENSER,
    BLOCK_SANDSTONE,
    BLOCK_CHISELED_SANDSTONE,
    BLOCK_CUT_SANDSTONE,
    BLOCK_NOTE_BLOCK,
    BLOCK_WHITE_BED,
    BLOCK_ORANGE_BED,
    BLOCK_MAGENTA_BED,
    BLOCK_LIGHT_BLUE_BED,
    BLOCK_YELLOW_BED,
    BLOCK_LIME_BED,
    BLOCK_PINK_BED,
    BLOCK_GRAY_BED,
    BLOCK_LIGHT_GRAY_BED,
    BLOCK_CYAN_BED,
    BLOCK_PURPLE_BED,
    BLOCK_BLUE_BED,
    BLOCK_BROWN_BED,
    BLOCK_GREEN_BED,
    BLOCK_RED_BED,
    BLOCK_BLACK_BED,
    BLOCK_POWERED_RAIL,
    BLOCK_DETECTOR_RAIL,
    BLOCK_STICKY_PISTON,
    BLOCK_COBWEB,
    BLOCK_GRASS,
    BLOCK_FERN,
    BLOCK_DEAD_BUSH,
    BLOCK_SEAGRASS,
    BLOCK_TALL_SEAGRASS,
    BLOCK_PISTON,
    BLOCK_PISTON_HEAD,
    BLOCK_WHITE_WOOL,
    BLOCK_ORANGE_WOOL,
    BLOCK_MAGENTA_WOOL,
    BLOCK_LIGHT_BLUE_WOOL,
    BLOCK_YELLOW_WOOL,
    BLOCK_LIME_WOOL,
    BLOCK_PINK_WOOL,
    BLOCK_GRAY_WOOL,
    BLOCK_LIGHT_GRAY_WOOL,
    BLOCK_CYAN_WOOL,
    BLOCK_PURPLE_WOOL,
    BLOCK_BLUE_WOOL,
    BLOCK_BROWN_WOOL,
    BLOCK_GREEN_WOOL,
    BLOCK_RED_WOOL,
    BLOCK_BLACK_WOOL,
    BLOCK_MOVING_PISTON,
    BLOCK_DANDELION,
    BLOCK_POPPY,
    BLOCK_BLUE_ORCHID,
    BLOCK_ALLIUM,
    BLOCK_AZURE_BLUET,
    BLOCK_RED_TULIP,
    BLOCK_ORANGE_TULIP,
    BLOCK_WHITE_TULIP,
    BLOCK_PINK_TULIP,
    BLOCK_OXEYE_DAISY,
    BLOCK_CORNFLOWER,
    BLOCK_WITHER_ROSE,
    BLOCK_LILY_OF_THE_VALLEY,
    BLOCK_BROWN_MUSHROOM,
    BLOCK_RED_MUSHROOM,
    BLOCK_GOLD_BLOCK,
    BLOCK_IRON_BLOCK,
    BLOCK_BRICKS,
    BLOCK_TNT,
    BLOCK_BOOKSHELF,
    BLOCK_MOSSY_COBBLESTONE,
    BLOCK_OBSIDIAN,
    BLOCK_TORCH,
    BLOCK_WALL_TORCH,
    BLOCK_FIRE,
    BLOCK_SOUL_FIRE,
    BLOCK_SPAWNER,
    BLOCK_OAK_STAIRS,
    BLOCK_CHEST,
    BLOCK_REDSTONE_WIRE,
    BLOCK_DIAMOND_ORE,
    BLOCK_DEEPSLATE_DIAMOND_ORE,
    BLOCK_DIAMOND_BLOCK,
    BLOCK_CRAFTING_TABLE,
    BLOCK_WHEAT,
    BLOCK_FARMLAND,
    BLOCK_FURNACE,
    BLOCK_OAK_SIGN,
    BLOCK_SPRUCE_SIGN,
    BLOCK_BIRCH_SIGN,
    BLOCK_ACACIA_SIGN,
    BLOCK_JUNGLE_SIGN,
    BLOCK_DARK_OAK_SIGN,
    BLOCK_OAK_DOOR,
    BLOCK_LADDER,
    BLOCK_RAIL,
    BLOCK_COBBLESTONE_STAIRS,
    BLOCK_OAK_WALL_SIGN,
    BLOCK_SPRUCE_WALL_SIGN,
    BLOCK_BIRCH_WALL_SIGN,
    BLOCK_ACACIA_WALL_SIGN,
    BLOCK_JUNGLE_WALL_SIGN,
    BLOCK_DARK_OAK_WALL_SIGN,
    BLOCK_LEVER,
    BLOCK_STONE_PRESSURE_PLATE,
    BLOCK_IRON_DOOR,
    BLOCK_OAK_PRESSURE_PLATE,
    BLOCK_SPRUCE_PRESSURE_PLATE,
    BLOCK_BIRCH_PRESSURE_PLATE,
    BLOCK_JUNGLE_PRESSURE_PLATE,
    BLOCK_ACACIA_PRESSURE_PLATE,
    BLOCK_DARK_OAK_PRESSURE_PLATE,
    BLOCK_REDSTONE_ORE,
    BLOCK_DEEPSLATE_REDSTONE_ORE,
    BLOCK_REDSTONE_TORCH,
    BLOCK_REDSTONE_WALL_TORCH,
    BLOCK_STONE_BUTTON,
    BLOCK_SNOW,
    BLOCK_ICE,
    BLOCK_SNOW_BLOCK,
    BLOCK_CACTUS,
    BLOCK_CLAY,
    BLOCK_SUGAR_CANE,
    BLOCK_JUKEBOX,
    BLOCK_OAK_FENCE,
    BLOCK_PUMPKIN,
    BLOCK_NETHERRACK,
    BLOCK_SOUL_SAND,
    BLOCK_SOUL_SOIL,
    BLOCK_BASALT,
    BLOCK_POLISHED_BASALT,
    BLOCK_SOUL_TORCH,
    BLOCK_SOUL_WALL_TORCH,
    BLOCK_GLOWSTONE,
    BLOCK_NETHER_PORTAL,
    BLOCK_CARVED_PUMPKIN,
    BLOCK_JACK_O_LANTERN,
    BLOCK_CAKE,
    BLOCK_REPEATER,
    BLOCK_WHITE_STAINED_GLASS,
    BLOCK_ORANGE_STAINED_GLASS,
    BLOCK_MAGENTA_STAINED_GLASS,
    BLOCK_LIGHT_BLUE_STAINED_GLASS,
    BLOCK_YELLOW_STAINED_GLASS,
    BLOCK_LIME_STAINED_GLASS,
    BLOCK_PINK_STAINED_GLASS,
    BLOCK_GRAY_STAINED_GLASS,
    BLOCK_LIGHT_GRAY_STAINED_GLASS,
    BLOCK_CYAN_STAINED_GLASS,
    BLOCK_PURPLE_STAINED_GLASS,
    BLOCK_BLUE_STAINED_GLASS,
    BLOCK_BROWN_STAINED_GLASS,
    BLOCK_GREEN_STAINED_GLASS,
    BLOCK_RED_STAINED_GLASS,
    BLOCK_BLACK_STAINED_GLASS,
    BLOCK_OAK_TRAPDOOR,
    BLOCK_SPRUCE_TRAPDOOR,
    BLOCK_BIRCH_TRAPDOOR,
    BLOCK_JUNGLE_TRAPDOOR,
    BLOCK_ACACIA_TRAPDOOR,
    BLOCK_DARK_OAK_TRAPDOOR,
    BLOCK_STONE_BRICKS,
    BLOCK_MOSSY_STONE_BRICKS,
    BLOCK_CRACKED_STONE_BRICKS,
    BLOCK_CHISELED_STONE_BRICKS,
    BLOCK_INFESTED_STONE,
    BLOCK_INFESTED_COBBLESTONE,
    BLOCK_INFESTED_STONE_BRICKS,
    BLOCK_INFESTED_MOSSY_STONE_BRICKS,
    BLOCK_INFESTED_CRACKED_STONE_BRICKS,
    BLOCK_INFESTED_CHISELED_STONE_BRICKS,
    BLOCK_BROWN_MUSHROOM_BLOCK,
    BLOCK_RED_MUSHROOM_BLOCK,
    BLOCK_MUSHROOM_STEM,
    BLOCK_IRON_BARS,
    BLOCK_CHAIN,
    BLOCK_GLASS_PANE,
    BLOCK_MELON,
    BLOCK_ATTACHED_PUMPKIN_STEM,
    BLOCK_ATTACHED_MELON_STEM,
    BLOCK_PUMPKIN_STEM,
    BLOCK_MELON_STEM,
    BLOCK_VINE,
    BLOCK_GLOW_LICHEN,
    BLOCK_OAK_FENCE_GATE,
    BLOCK_BRICK_STAIRS,
    BLOCK_STONE_BRICK_STAIRS,
    BLOCK_MYCELIUM,
    BLOCK_LILY_PAD,
    BLOCK_NETHER_BRICKS,
    BLOCK_NETHER_BRICK_FENCE,
    BLOCK_NETHER_BRICK_STAIRS,
    BLOCK_NETHER_WART,
    BLOCK_ENCHANTING_TABLE,
    BLOCK_BREWING_STAND,
    BLOCK_CAULDRON,
    BLOCK_WATER_CAULDRON,
    BLOCK_LAVA_CAULDRON,
    BLOCK_POWDER_SNOW_CAULDRON,
    BLOCK_END_PORTAL,
    BLOCK_END_PORTAL_FRAME,
    BLOCK_END_STONE,
    BLOCK_DRAGON_EGG,
    BLOCK_REDSTONE_LAMP,
    BLOCK_COCOA,
    BLOCK_SANDSTONE_STAIRS,
    BLOCK_EMERALD_ORE,
    BLOCK_DEEPSLATE_EMERALD_ORE,
    BLOCK_ENDER_CHEST,
    BLOCK_TRIPWIRE_HOOK,
    BLOCK_TRIPWIRE,
    BLOCK_EMERALD_BLOCK,
    BLOCK_SPRUCE_STAIRS,
    BLOCK_BIRCH_STAIRS,
    BLOCK_JUNGLE_STAIRS,
    BLOCK_COMMAND_BLOCK,
    BLOCK_BEACON,
    BLOCK_COBBLESTONE_WALL,
    BLOCK_MOSSY_COBBLESTONE_WALL,
    BLOCK_FLOWER_POT,
    BLOCK_POTTED_OAK_SAPLING,
    BLOCK_POTTED_SPRUCE_SAPLING,
    BLOCK_POTTED_BIRCH_SAPLING,
    BLOCK_POTTED_JUNGLE_SAPLING,
    BLOCK_POTTED_ACACIA_SAPLING,
    BLOCK_POTTED_DARK_OAK_SAPLING,
    BLOCK_POTTED_FERN,
    BLOCK_POTTED_DANDELION,
    BLOCK_POTTED_POPPY,
    BLOCK_POTTED_BLUE_ORCHID,
    BLOCK_POTTED_ALLIUM,
    BLOCK_POTTED_AZURE_BLUET,
    BLOCK_POTTED_RED_TULIP,
    BLOCK_POTTED_ORANGE_TULIP,
    BLOCK_POTTED_WHITE_TULIP,
    BLOCK_POTTED_PINK_TULIP,
    BLOCK_POTTED_OXEYE_DAISY,
    BLOCK_POTTED_CORNFLOWER,
    BLOCK_POTTED_LILY_OF_THE_VALLEY,
    BLOCK_POTTED_WITHER_ROSE,
    BLOCK_POTTED_RED_MUSHROOM,
    BLOCK_POTTED_BROWN_MUSHROOM,
    BLOCK_POTTED_DEAD_BUSH,
    BLOCK_POTTED_CACTUS,
    BLOCK_CARROTS,
    BLOCK_POTATOES,
    BLOCK_OAK_BUTTON,
    BLOCK_SPRUCE_BUTTON,
    BLOCK_BIRCH_BUTTON,
    BLOCK_JUNGLE_BUTTON,
    BLOCK_ACACIA_BUTTON,
    BLOCK_DARK_OAK_BUTTON,
    BLOCK_SKELETON_SKULL,
    BLOCK_SKELETON_WALL_SKULL,
    BLOCK_WITHER_SKELETON_SKULL,
    BLOCK_WITHER_SKELETON_WALL_SKULL,
    BLOCK_ZOMBIE_HEAD,
    BLOCK_ZOMBIE_WALL_HEAD,
    BLOCK_PLAYER_HEAD,
    BLOCK_PLAYER_WALL_HEAD,
    BLOCK_CREEPER_HEAD,
    BLOCK_CREEPER_WALL_HEAD,
    BLOCK_DRAGON_HEAD,
    BLOCK_DRAGON_WALL_HEAD,
    BLOCK_ANVIL,
    BLOCK_CHIPPED_ANVIL,
    BLOCK_DAMAGED_ANVIL,
    BLOCK_TRAPPED_CHEST,
    BLOCK_LIGHT_WEIGHTED_PRESSURE_PLATE,
    BLOCK_HEAVY_WEIGHTED_PRESSURE_PLATE,
    BLOCK_COMPARATOR,
    BLOCK_DAYLIGHT_DETECTOR,
    BLOCK_REDSTONE_BLOCK,
    BLOCK_NETHER_QUARTZ_ORE,
    BLOCK_HOPPER,
    BLOCK_QUARTZ_BLOCK,
    BLOCK_CHISELED_QUARTZ_BLOCK,
    BLOCK_QUARTZ_PILLAR,
    BLOCK_QUARTZ_STAIRS,
    BLOCK_ACTIVATOR_RAIL,
    BLOCK_DROPPER,
    BLOCK_WHITE_TERRACOTTA,
    BLOCK_ORANGE_TERRACOTTA,
    BLOCK_MAGENTA_TERRACOTTA,
    BLOCK_LIGHT_BLUE_TERRACOTTA,
    BLOCK_YELLOW_TERRACOTTA,
    BLOCK_LIME_TERRACOTTA,
    BLOCK_PINK_TERRACOTTA,
    BLOCK_GRAY_TERRACOTTA,
    BLOCK_LIGHT_GRAY_TERRACOTTA,
    BLOCK_CYAN_TERRACOTTA,
    BLOCK_PURPLE_TERRACOTTA,
    BLOCK_BLUE_TERRACOTTA,
    BLOCK_BROWN_TERRACOTTA,
    BLOCK_GREEN_TERRACOTTA,
    BLOCK_RED_TERRACOTTA,
    BLOCK_BLACK_TERRACOTTA,
    BLOCK_WHITE_STAINED_GLASS_PANE,
    BLOCK_ORANGE_STAINED_GLASS_PANE,
    BLOCK_MAGENTA_STAINED_GLASS_PANE,
    BLOCK_LIGHT_BLUE_STAINED_GLASS_PANE,
    BLOCK_YELLOW_STAINED_GLASS_PANE,
    BLOCK_LIME_STAINED_GLASS_PANE,
    BLOCK_PINK_STAINED_GLASS_PANE,
    BLOCK_GRAY_STAINED_GLASS_PANE,
    BLOCK_LIGHT_GRAY_STAINED_GLASS_PANE,
    BLOCK_CYAN_STAINED_GLASS_PANE,
    BLOCK_PURPLE_STAINED_GLASS_PANE,
    BLOCK_BLUE_STAINED_GLASS_PANE,
    BLOCK_BROWN_STAINED_GLASS_PANE,
    BLOCK_GREEN_STAINED_GLASS_PANE,
    BLOCK_RED_STAINED_GLASS_PANE,
    BLOCK_BLACK_STAINED_GLASS_PANE,
    BLOCK_ACACIA_STAIRS,
    BLOCK_DARK_OAK_STAIRS,
    BLOCK_SLIME_BLOCK,
    BLOCK_BARRIER,
    BLOCK_LIGHT,
    BLOCK_IRON_TRAPDOOR,
    BLOCK_PRISMARINE,
    BLOCK_PRISMARINE_BRICKS,
    BLOCK_DARK_PRISMARINE,
    BLOCK_PRISMARINE_STAIRS,
    BLOCK_PRISMARINE_BRICK_STAIRS,
    BLOCK_DARK_PRISMARINE_STAIRS,
    BLOCK_PRISMARINE_SLAB,
    BLOCK_PRISMARINE_BRICK_SLAB,
    BLOCK_DARK_PRISMARINE_SLAB,
    BLOCK_SEA_LANTERN,
    BLOCK_HAY_BLOCK,
    BLOCK_WHITE_CARPET,
    BLOCK_ORANGE_CARPET,
    BLOCK_MAGENTA_CARPET,
    BLOCK_LIGHT_BLUE_CARPET,
    BLOCK_YELLOW_CARPET,
    BLOCK_LIME_CARPET,
    BLOCK_PINK_CARPET,
    BLOCK_GRAY_CARPET,
    BLOCK_LIGHT_GRAY_CARPET,
    BLOCK_CYAN_CARPET,
    BLOCK_PURPLE_CARPET,
    BLOCK_BLUE_CARPET,
    BLOCK_BROWN_CARPET,
    BLOCK_GREEN_CARPET,
    BLOCK_RED_CARPET,
    BLOCK_BLACK_CARPET,
    BLOCK_TERRACOTTA,
    BLOCK_COAL_BLOCK,
    BLOCK_PACKED_ICE,
    BLOCK_SUNFLOWER,
    BLOCK_LILAC,
    BLOCK_ROSE_BUSH,
    BLOCK_PEONY,
    BLOCK_TALL_GRASS,
    BLOCK_LARGE_FERN,
    BLOCK_WHITE_BANNER,
    BLOCK_ORANGE_BANNER,
    BLOCK_MAGENTA_BANNER,
    BLOCK_LIGHT_BLUE_BANNER,
    BLOCK_YELLOW_BANNER,
    BLOCK_LIME_BANNER,
    BLOCK_PINK_BANNER,
    BLOCK_GRAY_BANNER,
    BLOCK_LIGHT_GRAY_BANNER,
    BLOCK_CYAN_BANNER,
    BLOCK_PURPLE_BANNER,
    BLOCK_BLUE_BANNER,
    BLOCK_BROWN_BANNER,
    BLOCK_GREEN_BANNER,
    BLOCK_RED_BANNER,
    BLOCK_BLACK_BANNER,
    BLOCK_WHITE_WALL_BANNER,
    BLOCK_ORANGE_WALL_BANNER,
    BLOCK_MAGENTA_WALL_BANNER,
    BLOCK_LIGHT_BLUE_WALL_BANNER,
    BLOCK_YELLOW_WALL_BANNER,
    BLOCK_LIME_WALL_BANNER,
    BLOCK_PINK_WALL_BANNER,
    BLOCK_GRAY_WALL_BANNER,
    BLOCK_LIGHT_GRAY_WALL_BANNER,
    BLOCK_CYAN_WALL_BANNER,
    BLOCK_PURPLE_WALL_BANNER,
    BLOCK_BLUE_WALL_BANNER,
    BLOCK_BROWN_WALL_BANNER,
    BLOCK_GREEN_WALL_BANNER,
    BLOCK_RED_WALL_BANNER,
    BLOCK_BLACK_WALL_BANNER,
    BLOCK_RED_SANDSTONE,
    BLOCK_CHISELED_RED_SANDSTONE,
    BLOCK_CUT_RED_SANDSTONE,
    BLOCK_RED_SANDSTONE_STAIRS,
    BLOCK_OAK_SLAB,
    BLOCK_SPRUCE_SLAB,
    BLOCK_BIRCH_SLAB,
    BLOCK_JUNGLE_SLAB,
    BLOCK_ACACIA_SLAB,
    BLOCK_DARK_OAK_SLAB,
    BLOCK_STONE_SLAB,
    BLOCK_SMOOTH_STONE_SLAB,
    BLOCK_SANDSTONE_SLAB,
    BLOCK_CUT_SANDSTONE_SLAB,
    BLOCK_PETRIFIED_OAK_SLAB,
    BLOCK_COBBLESTONE_SLAB,
    BLOCK_BRICK_SLAB,
    BLOCK_STONE_BRICK_SLAB,
    BLOCK_NETHER_BRICK_SLAB,
    BLOCK_QUARTZ_SLAB,
    BLOCK_RED_SANDSTONE_SLAB,
    BLOCK_CUT_RED_SANDSTONE_SLAB,
    BLOCK_PURPUR_SLAB,
    BLOCK_SMOOTH_STONE,
    BLOCK_SMOOTH_SANDSTONE,
    BLOCK_SMOOTH_QUARTZ,
    BLOCK_SMOOTH_RED_SANDSTONE,
    BLOCK_SPRUCE_FENCE_GATE,
    BLOCK_BIRCH_FENCE_GATE,
    BLOCK_JUNGLE_FENCE_GATE,
    BLOCK_ACACIA_FENCE_GATE,
    BLOCK_DARK_OAK_FENCE_GATE,
    BLOCK_SPRUCE_FENCE,
    BLOCK_BIRCH_FENCE,
    BLOCK_JUNGLE_FENCE,
    BLOCK_ACACIA_FENCE,
    BLOCK_DARK_OAK_FENCE,
    BLOCK_SPRUCE_DOOR,
    BLOCK_BIRCH_DOOR,
    BLOCK_JUNGLE_DOOR,
    BLOCK_ACACIA_DOOR,
    BLOCK_DARK_OAK_DOOR,
    BLOCK_END_ROD,
    BLOCK_CHORUS_PLANT,
    BLOCK_CHORUS_FLOWER,
    BLOCK_PURPUR_BLOCK,
    BLOCK_PURPUR_PILLAR,
    BLOCK_PURPUR_STAIRS,
    BLOCK_END_STONE_BRICKS,
    BLOCK_BEETROOTS,
    BLOCK_DIRT_PATH,
    BLOCK_END_GATEWAY,
    BLOCK_REPEATING_COMMAND_BLOCK,
    BLOCK_CHAIN_COMMAND_BLOCK,
    BLOCK_FROSTED_ICE,
    BLOCK_MAGMA_BLOCK,
    BLOCK_NETHER_WART_BLOCK,
    BLOCK_RED_NETHER_BRICKS,
    BLOCK_BONE_BLOCK,
    BLOCK_STRUCTURE_VOID,
    BLOCK_OBSERVER,
    BLOCK_SHULKER_BOX,
    BLOCK_WHITE_SHULKER_BOX,
    BLOCK_ORANGE_SHULKER_BOX,
    BLOCK_MAGENTA_SHULKER_BOX,
    BLOCK_LIGHT_BLUE_SHULKER_BOX,
    BLOCK_YELLOW_SHULKER_BOX,
    BLOCK_LIME_SHULKER_BOX,
    BLOCK_PINK_SHULKER_BOX,
    BLOCK_GRAY_SHULKER_BOX,
    BLOCK_LIGHT_GRAY_SHULKER_BOX,
    BLOCK_CYAN_SHULKER_BOX,
    BLOCK_PURPLE_SHULKER_BOX,
    BLOCK_BLUE_SHULKER_BOX,
    BLOCK_BROWN_SHULKER_BOX,
    BLOCK_GREEN_SHULKER_BOX,
    BLOCK_RED_SHULKER_BOX,
    BLOCK_BLACK_SHULKER_BOX,
    BLOCK_WHITE_GLAZED_TERRACOTTA,
    BLOCK_ORANGE_GLAZED_TERRACOTTA,
    BLOCK_MAGENTA_GLAZED_TERRACOTTA,
    BLOCK_LIGHT_BLUE_GLAZED_TERRACOTTA,
    BLOCK_YELLOW_GLAZED_TERRACOTTA,
    BLOCK_LIME_GLAZED_TERRACOTTA,
    BLOCK_PINK_GLAZED_TERRACOTTA,
    BLOCK_GRAY_GLAZED_TERRACOTTA,
    BLOCK_LIGHT_GRAY_GLAZED_TERRACOTTA,
    BLOCK_CYAN_GLAZED_TERRACOTTA,
    BLOCK_PURPLE_GLAZED_TERRACOTTA,
    BLOCK_BLUE_GLAZED_TERRACOTTA,
    BLOCK_BROWN_GLAZED_TERRACOTTA,
    BLOCK_GREEN_GLAZED_TERRACOTTA,
    BLOCK_RED_GLAZED_TERRACOTTA,
    BLOCK_BLACK_GLAZED_TERRACOTTA,
    BLOCK_WHITE_CONCRETE,
    BLOCK_ORANGE_CONCRETE,
    BLOCK_MAGENTA_CONCRETE,
    BLOCK_LIGHT_BLUE_CONCRETE,
    BLOCK_YELLOW_CONCRETE,
    BLOCK_LIME_CONCRETE,
    BLOCK_PINK_CONCRETE,
    BLOCK_GRAY_CONCRETE,
    BLOCK_LIGHT_GRAY_CONCRETE,
    BLOCK_CYAN_CONCRETE,
    BLOCK_PURPLE_CONCRETE,
    BLOCK_BLUE_CONCRETE,
    BLOCK_BROWN_CONCRETE,
    BLOCK_GREEN_CONCRETE,
    BLOCK_RED_CONCRETE,
    BLOCK_BLACK_CONCRETE,
    BLOCK_WHITE_CONCRETE_POWDER,
    BLOCK_ORANGE_CONCRETE_POWDER,
    BLOCK_MAGENTA_CONCRETE_POWDER,
    BLOCK_LIGHT_BLUE_CONCRETE_POWDER,
    BLOCK_YELLOW_CONCRETE_POWDER,
    BLOCK_LIME_CONCRETE_POWDER,
    BLOCK_PINK_CONCRETE_POWDER,
    BLOCK_GRAY_CONCRETE_POWDER,
    BLOCK_LIGHT_GRAY_CONCRETE_POWDER,
    BLOCK_CYAN_CONCRETE_POWDER,
    BLOCK_PURPLE_CONCRETE_POWDER,
    BLOCK_BLUE_CONCRETE_POWDER,
    BLOCK_BROWN_CONCRETE_POWDER,
    BLOCK_GREEN_CONCRETE_POWDER,
    BLOCK_RED_CONCRETE_POWDER,
    BLOCK_BLACK_CONCRETE_POWDER,
    BLOCK_KELP,
    BLOCK_KELP_PLANT,
    BLOCK_DRIED_KELP_BLOCK,
    BLOCK_TURTLE_EGG,
    BLOCK_DEAD_TUBE_CORAL_BLOCK,
    BLOCK_DEAD_BRAIN_CORAL_BLOCK,
    BLOCK_DEAD_BUBBLE_CORAL_BLOCK,
    BLOCK_DEAD_FIRE_CORAL_BLOCK,
    BLOCK_DEAD_HORN_CORAL_BLOCK,
    BLOCK_TUBE_CORAL_BLOCK,
    BLOCK_BRAIN_CORAL_BLOCK,
    BLOCK_BUBBLE_CORAL_BLOCK,
    BLOCK_FIRE_CORAL_BLOCK,
    BLOCK_HORN_CORAL_BLOCK,
    BLOCK_DEAD_TUBE_CORAL,
    BLOCK_DEAD_BRAIN_CORAL,
    BLOCK_DEAD_BUBBLE_CORAL,
    BLOCK_DEAD_FIRE_CORAL,
    BLOCK_DEAD_HORN_CORAL,
    BLOCK_TUBE_CORAL,
    BLOCK_BRAIN_CORAL,
    BLOCK_BUBBLE_CORAL,
    BLOCK_FIRE_CORAL,
    BLOCK_HORN_CORAL,
    BLOCK_DEAD_TUBE_CORAL_FAN,
    BLOCK_DEAD_BRAIN_CORAL_FAN,
    BLOCK_DEAD_BUBBLE_CORAL_FAN,
    BLOCK_DEAD_FIRE_CORAL_FAN,
    BLOCK_DEAD_HORN_CORAL_FAN,
    BLOCK_TUBE_CORAL_FAN,
    BLOCK_BRAIN_CORAL_FAN,
    BLOCK_BUBBLE_CORAL_FAN,
    BLOCK_FIRE_CORAL_FAN,
    BLOCK_HORN_CORAL_FAN,
    BLOCK_DEAD_TUBE_CORAL_WALL_FAN,
    BLOCK_DEAD_BRAIN_CORAL_WALL_FAN,
    BLOCK_DEAD_BUBBLE_CORAL_WALL_FAN,
    BLOCK_DEAD_FIRE_CORAL_WALL_FAN,
    BLOCK_DEAD_HORN_CORAL_WALL_FAN,
    BLOCK_TUBE_CORAL_WALL_FAN,
    BLOCK_BRAIN_CORAL_WALL_FAN,
    BLOCK_BUBBLE_CORAL_WALL_FAN,
    BLOCK_FIRE_CORAL_WALL_FAN,
    BLOCK_HORN_CORAL_WALL_FAN,
    BLOCK_SEA_PICKLE,
    BLOCK_BLUE_ICE,
    BLOCK_CONDUIT,
    BLOCK_BAMBOO_SAPLING,
    BLOCK_BAMBOO,
    BLOCK_POTTED_BAMBOO,
    BLOCK_VOID_AIR,
    BLOCK_CAVE_AIR,
    BLOCK_BUBBLE_COLUMN,
    BLOCK_POLISHED_GRANITE_STAIRS,
    BLOCK_SMOOTH_RED_SANDSTONE_STAIRS,
    BLOCK_MOSSY_STONE_BRICK_STAIRS,
    BLOCK_POLISHED_DIORITE_STAIRS,
    BLOCK_MOSSY_COBBLESTONE_STAIRS,
    BLOCK_END_STONE_BRICK_STAIRS,
    BLOCK_STONE_STAIRS,
    BLOCK_SMOOTH_SANDSTONE_STAIRS,
    BLOCK_SMOOTH_QUARTZ_STAIRS,
    BLOCK_GRANITE_STAIRS,
    BLOCK_ANDESITE_STAIRS,
    BLOCK_RED_NETHER_BRICK_STAIRS,
    BLOCK_POLISHED_ANDESITE_STAIRS,
    BLOCK_DIORITE_STAIRS,
    BLOCK_POLISHED_GRANITE_SLAB,
    BLOCK_SMOOTH_RED_SANDSTONE_SLAB,
    BLOCK_MOSSY_STONE_BRICK_SLAB,
    BLOCK_POLISHED_DIORITE_SLAB,
    BLOCK_MOSSY_COBBLESTONE_SLAB,
    BLOCK_END_STONE_BRICK_SLAB,
    BLOCK_SMOOTH_SANDSTONE_SLAB,
    BLOCK_SMOOTH_QUARTZ_SLAB,
    BLOCK_GRANITE_SLAB,
    BLOCK_ANDESITE_SLAB,
    BLOCK_RED_NETHER_BRICK_SLAB,
    BLOCK_POLISHED_ANDESITE_SLAB,
    BLOCK_DIORITE_SLAB,
    BLOCK_BRICK_WALL,
    BLOCK_PRISMARINE_WALL,
    BLOCK_RED_SANDSTONE_WALL,
    BLOCK_MOSSY_STONE_BRICK_WALL,
    BLOCK_GRANITE_WALL,
    BLOCK_STONE_BRICK_WALL,
    BLOCK_NETHER_BRICK_WALL,
    BLOCK_ANDESITE_WALL,
    BLOCK_RED_NETHER_BRICK_WALL,
    BLOCK_SANDSTONE_WALL,
    BLOCK_END_STONE_BRICK_WALL,
    BLOCK_DIORITE_WALL,
    BLOCK_SCAFFOLDING,
    BLOCK_LOOM,
    BLOCK_BARREL,
    BLOCK_SMOKER,
    BLOCK_BLAST_FURNACE,
    BLOCK_CARTOGRAPHY_TABLE,
    BLOCK_FLETCHING_TABLE,
    BLOCK_GRINDSTONE,
    BLOCK_LECTERN,
    BLOCK_SMITHING_TABLE,
    BLOCK_STONECUTTER,
    BLOCK_BELL,
    BLOCK_LANTERN,
    BLOCK_SOUL_LANTERN,
    BLOCK_CAMPFIRE,
    BLOCK_SOUL_CAMPFIRE,
    BLOCK_SWEET_BERRY_BUSH,
    BLOCK_WARPED_STEM,
    BLOCK_STRIPPED_WARPED_STEM,
    BLOCK_WARPED_HYPHAE,
    BLOCK_STRIPPED_WARPED_HYPHAE,
    BLOCK_WARPED_NYLIUM,
    BLOCK_WARPED_FUNGUS,
    BLOCK_WARPED_WART_BLOCK,
    BLOCK_WARPED_ROOTS,
    BLOCK_NETHER_SPROUTS,
    BLOCK_CRIMSON_STEM,
    BLOCK_STRIPPED_CRIMSON_STEM,
    BLOCK_CRIMSON_HYPHAE,
    BLOCK_STRIPPED_CRIMSON_HYPHAE,
    BLOCK_CRIMSON_NYLIUM,
    BLOCK_CRIMSON_FUNGUS,
    BLOCK_SHROOMLIGHT,
    BLOCK_WEEPING_VINES,
    BLOCK_WEEPING_VINES_PLANT,
    BLOCK_TWISTING_VINES,
    BLOCK_TWISTING_VINES_PLANT,
    BLOCK_CRIMSON_ROOTS,
    BLOCK_CRIMSON_PLANKS,
    BLOCK_WARPED_PLANKS,
    BLOCK_CRIMSON_SLAB,
    BLOCK_WARPED_SLAB,
    BLOCK_CRIMSON_PRESSURE_PLATE,
    BLOCK_WARPED_PRESSURE_PLATE,
    BLOCK_CRIMSON_FENCE,
    BLOCK_WARPED_FENCE,
    BLOCK_CRIMSON_TRAPDOOR,
    BLOCK_WARPED_TRAPDOOR,
    BLOCK_CRIMSON_FENCE_GATE,
    BLOCK_WARPED_FENCE_GATE,
    BLOCK_CRIMSON_STAIRS,
    BLOCK_WARPED_STAIRS,
    BLOCK_CRIMSON_BUTTON,
    BLOCK_WARPED_BUTTON,
    BLOCK_CRIMSON_DOOR,
    BLOCK_WARPED_DOOR,
    BLOCK_CRIMSON_SIGN,
    BLOCK_WARPED_SIGN,
    BLOCK_CRIMSON_WALL_SIGN,
    BLOCK_WARPED_WALL_SIGN,
    BLOCK_STRUCTURE_BLOCK,
    BLOCK_JIGSAW,
    BLOCK_COMPOSTER,
    BLOCK_TARGET,
    BLOCK_BEE_NEST,
    BLOCK_BEEHIVE,
    BLOCK_HONEY_BLOCK,
    BLOCK_HONEYCOMB_BLOCK,
    BLOCK_NETHERITE_BLOCK,
    BLOCK_ANCIENT_DEBRIS,
    BLOCK_CRYING_OBSIDIAN,
    BLOCK_RESPAWN_ANCHOR,
    BLOCK_POTTED_CRIMSON_FUNGUS,
    BLOCK_POTTED_WARPED_FUNGUS,
    BLOCK_POTTED_CRIMSON_ROOTS,
    BLOCK_POTTED_WARPED_ROOTS,
    BLOCK_LODESTONE,
    BLOCK_BLACKSTONE,
    BLOCK_BLACKSTONE_STAIRS,
    BLOCK_BLACKSTONE_WALL,
    BLOCK_BLACKSTONE_SLAB,
    BLOCK_POLISHED_BLACKSTONE,
    BLOCK_POLISHED_BLACKSTONE_BRICKS,
    BLOCK_CRACKED_POLISHED_BLACKSTONE_BRICKS,
    BLOCK_CHISELED_POLISHED_BLACKSTONE,
    BLOCK_POLISHED_BLACKSTONE_BRICK_SLAB,
    BLOCK_POLISHED_BLACKSTONE_BRICK_STAIRS,
    BLOCK_POLISHED_BLACKSTONE_BRICK_WALL,
    BLOCK_GILDED_BLACKSTONE,
    BLOCK_POLISHED_BLACKSTONE_STAIRS,
    BLOCK_POLISHED_BLACKSTONE_SLAB,
    BLOCK_POLISHED_BLACKSTONE_PRESSURE_PLATE,
    BLOCK_POLISHED_BLACKSTONE_BUTTON,
    BLOCK_POLISHED_BLACKSTONE_WALL,
    BLOCK_CHISELED_NETHER_BRICKS,
    BLOCK_CRACKED_NETHER_BRICKS,
    BLOCK_QUARTZ_BRICKS,
    BLOCK_CANDLE,
    BLOCK_WHITE_CANDLE,
    BLOCK_ORANGE_CANDLE,
    BLOCK_MAGENTA_CANDLE,
    BLOCK_LIGHT_BLUE_CANDLE,
    BLOCK_YELLOW_CANDLE,
    BLOCK_LIME_CANDLE,
    BLOCK_PINK_CANDLE,
    BLOCK_GRAY_CANDLE,
    BLOCK_LIGHT_GRAY_CANDLE,
    BLOCK_CYAN_CANDLE,
    BLOCK_PURPLE_CANDLE,
    BLOCK_BLUE_CANDLE,
    BLOCK_BROWN_CANDLE,
    BLOCK_GREEN_CANDLE,
    BLOCK_RED_CANDLE,
    BLOCK_BLACK_CANDLE,
    BLOCK_CANDLE_CAKE,
    BLOCK_WHITE_CANDLE_CAKE,
    BLOCK_ORANGE_CANDLE_CAKE,
    BLOCK_MAGENTA_CANDLE_CAKE,
    BLOCK_LIGHT_BLUE_CANDLE_CAKE,
    BLOCK_YELLOW_CANDLE_CAKE,
    BLOCK_LIME_CANDLE_CAKE,
    BLOCK_PINK_CANDLE_CAKE,
    BLOCK_GRAY_CANDLE_CAKE,
    BLOCK_LIGHT_GRAY_CANDLE_CAKE,
    BLOCK_CYAN_CANDLE_CAKE,
    BLOCK_PURPLE_CANDLE_CAKE,
    BLOCK_BLUE_CANDLE_CAKE,
    BLOCK_BROWN_CANDLE_CAKE,
    BLOCK_GREEN_CANDLE_CAKE,
    BLOCK_RED_CANDLE_CAKE,
    BLOCK_BLACK_CANDLE_CAKE,
    BLOCK_AMETHYST_BLOCK,
    BLOCK_BUDDING_AMETHYST,
    BLOCK_AMETHYST_CLUSTER,
    BLOCK_LARGE_AMETHYST_BUD,
    BLOCK_MEDIUM_AMETHYST_BUD,
    BLOCK_SMALL_AMETHYST_BUD,
    BLOCK_TUFF,
    BLOCK_CALCITE,
    BLOCK_TINTED_GLASS,
    BLOCK_POWDER_SNOW,
    BLOCK_SCULK_SENSOR,
    BLOCK_OXIDIZED_COPPER,
    BLOCK_WEATHERED_COPPER,
    BLOCK_EXPOSED_COPPER,
    BLOCK_COPPER_BLOCK,
    BLOCK_COPPER_ORE,
    BLOCK_DEEPSLATE_COPPER_ORE,
    BLOCK_OXIDIZED_CUT_COPPER,
    BLOCK_WEATHERED_CUT_COPPER,
    BLOCK_EXPOSED_CUT_COPPER,
    BLOCK_CUT_COPPER,
    BLOCK_OXIDIZED_CUT_COPPER_STAIRS,
    BLOCK_WEATHERED_CUT_COPPER_STAIRS,
    BLOCK_EXPOSED_CUT_COPPER_STAIRS,
    BLOCK_CUT_COPPER_STAIRS,
    BLOCK_OXIDIZED_CUT_COPPER_SLAB,
    BLOCK_WEATHERED_CUT_COPPER_SLAB,
    BLOCK_EXPOSED_CUT_COPPER_SLAB,
    BLOCK_CUT_COPPER_SLAB,
    BLOCK_WAXED_COPPER_BLOCK,
    BLOCK_WAXED_WEATHERED_COPPER,
    BLOCK_WAXED_EXPOSED_COPPER,
    BLOCK_WAXED_OXIDIZED_COPPER,
    BLOCK_WAXED_OXIDIZED_CUT_COPPER,
    BLOCK_WAXED_WEATHERED_CUT_COPPER,
    BLOCK_WAXED_EXPOSED_CUT_COPPER,
    BLOCK_WAXED_CUT_COPPER,
    BLOCK_WAXED_OXIDIZED_CUT_COPPER_STAIRS,
    BLOCK_WAXED_WEATHERED_CUT_COPPER_STAIRS,
    BLOCK_WAXED_EXPOSED_CUT_COPPER_STAIRS,
    BLOCK_WAXED_CUT_COPPER_STAIRS,
    BLOCK_WAXED_OXIDIZED_CUT_COPPER_SLAB,
    BLOCK_WAXED_WEATHERED_CUT_COPPER_SLAB,
    BLOCK_WAXED_EXPOSED_CUT_COPPER_SLAB,
    BLOCK_WAXED_CUT_COPPER_SLAB,
    BLOCK_LIGHTNING_ROD,
    BLOCK_POINTED_DRIPSTONE,
    BLOCK_DRIPSTONE_BLOCK,
    BLOCK_CAVE_VINES,
    BLOCK_CAVE_VINES_PLANT,
    BLOCK_SPORE_BLOSSOM,
    BLOCK_AZALEA,
    BLOCK_FLOWERING_AZALEA,
    BLOCK_MOSS_CARPET,
    BLOCK_MOSS_BLOCK,
    BLOCK_BIG_DRIPLEAF,
    BLOCK_BIG_DRIPLEAF_STEM,
    BLOCK_SMALL_DRIPLEAF,
    BLOCK_HANGING_ROOTS,
    BLOCK_ROOTED_DIRT,
    BLOCK_DEEPSLATE,
    BLOCK_COBBLED_DEEPSLATE,
    BLOCK_COBBLED_DEEPSLATE_STAIRS,
    BLOCK_COBBLED_DEEPSLATE_SLAB,
    BLOCK_COBBLED_DEEPSLATE_WALL,
    BLOCK_POLISHED_DEEPSLATE,
    BLOCK_POLISHED_DEEPSLATE_STAIRS,
    BLOCK_POLISHED_DEEPSLATE_SLAB,
    BLOCK_POLISHED_DEEPSLATE_WALL,
    BLOCK_DEEPSLATE_TILES,
    BLOCK_DEEPSLATE_TILE_STAIRS,
    BLOCK_DEEPSLATE_TILE_SLAB,
    BLOCK_DEEPSLATE_TILE_WALL,
    BLOCK_DEEPSLATE_BRICKS,
    BLOCK_DEEPSLATE_BRICK_STAIRS,
    BLOCK_DEEPSLATE_BRICK_SLAB,
    BLOCK_DEEPSLATE_BRICK_WALL,
    BLOCK_CHISELED_DEEPSLATE,
    BLOCK_CRACKED_DEEPSLATE_BRICKS,
    BLOCK_CRACKED_DEEPSLATE_TILES,
    BLOCK_INFESTED_DEEPSLATE,
    BLOCK_SMOOTH_BASALT,
    BLOCK_RAW_IRON_BLOCK,
    BLOCK_RAW_COPPER_BLOCK,
    BLOCK_RAW_GOLD_BLOCK,
    BLOCK_POTTED_AZALEA_BUSH,
    BLOCK_POTTED_FLOWERING_AZALEA_BUSH,
    VANILLA_BLOCK_TYPE_COUNT,
    // unknown block type used e.g. if you get a block from an unloaded chunk
    BLOCK_UNKNOWN = VANILLA_BLOCK_TYPE_COUNT,
    ACTUAL_BLOCK_TYPE_COUNT,
};

enum slab_type {
    SLAB_TOP,
    SLAB_BOTTOM,
    SLAB_DOUBLE,
};

enum axis {
    AXIS_X,
    AXIS_Y,
    AXIS_Z,
};

enum attach_face {
    ATTACH_FACE_FLOOR,
    ATTACH_FACE_WALL,
    ATTACH_FACE_CEILING,
};

enum bell_attachment {
    BELL_ATTACHMENT_FLOOR,
    BELL_ATTACHMENT_CEILING,
    BELL_ATTACHMENT_SINGLE_WALL,
    BELL_ATTACHMENT_DOUBLE_WALL,
};

enum wall_side {
    WALL_SIDE_NONE,
    WALL_SIDE_LOW,
    WALL_SIDE_TALL,
};

enum redstone_side {
    REDSTONE_SIDE_NONE,
    REDSTONE_SIDE_SIDE,
    REDSTONE_SIDE_UP,
};

enum double_block_half {
    DOUBLE_BLOCK_HALF_UPPER,
    DOUBLE_BLOCK_HALF_LOWER,
};

enum block_half {
    BLOCK_HALF_TOP,
    BLOCK_HALF_BOTTOM,
};

enum rail_shape {
    RAIL_SHAPE_Z,
    RAIL_SHAPE_X,
    RAIL_SHAPE_ASCENDING_POS_X,
    RAIL_SHAPE_ASCENDING_NEG_X,
    RAIL_SHAPE_ASCENDING_NEG_Z,
    RAIL_SHAPE_ASCENDING_POS_Z,
    RAIL_SHAPE_POS_Z_POS_X,
    RAIL_SHAPE_POS_Z_NEG_X,
    RAIL_SHAPE_NEG_Z_NEG_X,
    RAIL_SHAPE_NEG_Z_POS_X,
};

enum bed_part {
    BED_PART_HEAD,
    BED_PART_FOOT,
};

enum chest_type {
    CHEST_TYPE_SINGLE,
    CHEST_TYPE_LEFT,
    CHEST_TYPE_RIGHT,
};

enum comparator_mode {
    COMPARATOR_MODE_COMPARE,
    COMPARATOR_MODE_SUBTRACT,
};

enum door_hinge {
    DOOR_HINGE_LEFT,
    DOOR_HINGE_RIGHT,
};

enum instrument {
    INSTRUMENT_HARP,
    INSTRUMENT_BASEDRUM,
    INSTRUMENT_SNARE,
    INSTRUMENT_HAT,
    INSTRUMENT_BASS,
    INSTRUMENT_FLUTE,
    INSTRUMENT_BELL,
    INSTRUMENT_GUITAR,
    INSTRUMENT_CHIME,
    INSTRUMENT_XYLOPHONE,
    INSTRUMENT_IRON_XYLOPHONE,
    INSTRUMENT_COW_BELL,
    INSTRUMENT_DIDGERIDOO,
    INSTRUMENT_BIT,
    INSTRUMENT_BANJO,
    INSTRUMENT_PLING,
};

enum piston_type {
    PISTON_TYPE_DEFAULT,
    PISTON_TYPE_STICKY,
};

enum stairs_shape {
    STAIRS_SHAPE_STRAIGHT,
    STAIRS_SHAPE_INNER_LEFT,
    STAIRS_SHAPE_INNER_RIGHT,
    STAIRS_SHAPE_OUTER_LEFT,
    STAIRS_SHAPE_OUTER_RIGHT,
};

enum structure_block_mode {
    STRUCTURE_BLOCK_MODE_SAVE,
    STRUCTURE_BLOCK_MODE_LOAD,
    STRUCTURE_BLOCK_MODE_CORNER,
    STRUCTURE_BLOCK_MODE_DATA,
};

enum bamboo_leaves {
    BAMBOO_LEAVES_NONE,
    BAMBOO_LEAVES_SMALL,
    BAMBOO_LEAVES_LARGE,
};

enum jigsaw_orientation {
    JIGSAW_ORIENTATION_DOWN_EAST,
    JIGSAW_ORIENTATION_DOWN_NORTH,
    JIGSAW_ORIENTATION_DOWN_SOUTH,
    JIGSAW_ORIENTATION_DOWN_WEST,
    JIGSAW_ORIENTATION_UP_EAST,
    JIGSAW_ORIENTATION_UP_NORTH,
    JIGSAW_ORIENTATION_UP_SOUTH,
    JIGSAW_ORIENTATION_UP_WEST,
    JIGSAW_ORIENTATION_WEST_UP,
    JIGSAW_ORIENTATION_EAST_UP,
    JIGSAW_ORIENTATION_NORTH_UP,
    JIGSAW_ORIENTATION_SOUTH_UP,
};

enum fluid_level {
    FLUID_LEVEL_SOURCE,
    FLUID_LEVEL_FLOWING_7,
    FLUID_LEVEL_FLOWING_6,
    FLUID_LEVEL_FLOWING_5,
    FLUID_LEVEL_FLOWING_4,
    FLUID_LEVEL_FLOWING_3,
    FLUID_LEVEL_FLOWING_2,
    FLUID_LEVEL_FLOWING_1,
    FLUID_LEVEL_FALLING,
    // @NOTE(traks) there are 7 more possible values for fluid levels, but
    // vanilla Minecraft doesn't actually seem to do anything with these

    // custom fluid level
    FLUID_LEVEL_NONE,
};

enum dripleaf_tilt {
    DRIPLEAF_TILT_NONE,
    DRIPLEAF_TILT_UNSTABLE,
    DRIPLEAF_TILT_PARTIAL,
    DRIPLEAF_TILT_FULL,
};

enum dripstone_thickness {
    DRIPSTONE_THICKNESS_TIP_MERGE,
    DRIPSTONE_THICKNESS_TIP,
    DRIPSTONE_THICKNESS_FRUSTUM,
    DRIPSTONE_THICKNESS_MIDDLE,
    DRIPSTONE_THICKNESS_BASE,
};

enum sculk_sensor_phase {
    SCULK_SENSOR_PHASE_INACTIVE,
    SCULK_SENSOR_PHASE_ACTIVE,
    SCULK_SENSOR_PHASE_COOLDOWN,
};

typedef struct {
    unsigned char value_count;
    // name size, name, value size, value, value size, value, etc.
    unsigned char tape[255];
} block_property_spec;

typedef struct {
    u16 base_state;
    unsigned char property_count;
    unsigned char property_specs[8];
    unsigned char default_value_indices[8];
} block_properties;

typedef struct {
    float min_x;
    float min_y;
    float min_z;
    float max_x;
    float max_y;
    float max_z;
} block_box;

typedef struct {
    unsigned char box_count;
    unsigned char flags;
    block_box boxes[8];
} block_model;

// @NOTE(traks) some functions don't return a block model index, but a block
// model that isn't associated to an index. We need to test these against
// full-ness.
#define BLOCK_MODEL_IS_FULL ((unsigned char) (0x1 << 0))

enum block_model {
    BLOCK_MODEL_EMPTY,
    BLOCK_MODEL_Y_1,
    BLOCK_MODEL_Y_2,
    BLOCK_MODEL_Y_3,
    BLOCK_MODEL_Y_4,
    BLOCK_MODEL_Y_5,
    BLOCK_MODEL_Y_6,
    BLOCK_MODEL_Y_7,
    BLOCK_MODEL_Y_8,
    BLOCK_MODEL_Y_9,
    BLOCK_MODEL_Y_10,
    BLOCK_MODEL_Y_11,
    BLOCK_MODEL_Y_12,
    BLOCK_MODEL_Y_13,
    BLOCK_MODEL_Y_14,
    BLOCK_MODEL_Y_15,
    BLOCK_MODEL_FULL,
    BLOCK_MODEL_FLOWER_POT,
    BLOCK_MODEL_CACTUS,
    BLOCK_MODEL_COMPOSTER,
    BLOCK_MODEL_HONEY_BLOCK,
    BLOCK_MODEL_FENCE_GATE_FACING_X,
    BLOCK_MODEL_FENCE_GATE_FACING_Z,
    BLOCK_MODEL_CENTRED_BAMBOO,
    // 16 possible options, bit order: pos x, neg x, pos z, neg z
    BLOCK_MODEL_PANE_CENTRE,
    BLOCK_MODEL_PANE_NEG_Z,
    BLOCK_MODEL_PANE_POS_Z,
    BLOCK_MODEL_PANE_Z,
    BLOCK_MODEL_PANE_NEG_X,
    BLOCK_MODEL_PANE_NEG_X_NEG_Z,
    BLOCK_MODEL_PANE_NEG_X_POS_Z,
    BLOCK_MODEL_PANE_NEG_X_Z,
    BLOCK_MODEL_PANE_POS_X,
    BLOCK_MODEL_PANE_POS_X_NEG_Z,
    BLOCK_MODEL_PANE_POS_X_POS_Z,
    BLOCK_MODEL_PANE_POS_X_Z,
    BLOCK_MODEL_PANE_X,
    BLOCK_MODEL_PANE_X_NEG_Z,
    BLOCK_MODEL_PANE_X_POS_Z,
    BLOCK_MODEL_PANE_X_Z,
    // 16 possible options, bit order: pos x, neg x, pos z, neg z
    BLOCK_MODEL_FENCE_CENTRE,
    BLOCK_MODEL_FENCE_NEG_Z,
    BLOCK_MODEL_FENCE_POS_Z,
    BLOCK_MODEL_FENCE_Z,
    BLOCK_MODEL_FENCE_NEG_X,
    BLOCK_MODEL_FENCE_NEG_X_NEG_Z,
    BLOCK_MODEL_FENCE_NEG_X_POS_Z,
    BLOCK_MODEL_FENCE_NEG_X_Z,
    BLOCK_MODEL_FENCE_POS_X,
    BLOCK_MODEL_FENCE_POS_X_NEG_Z,
    BLOCK_MODEL_FENCE_POS_X_POS_Z,
    BLOCK_MODEL_FENCE_POS_X_Z,
    BLOCK_MODEL_FENCE_X,
    BLOCK_MODEL_FENCE_X_NEG_Z,
    BLOCK_MODEL_FENCE_X_POS_Z,
    BLOCK_MODEL_FENCE_X_Z,
    // 4 options
    BLOCK_MODEL_BED_FOOT_POS_X,
    BLOCK_MODEL_BED_FOOT_POS_Z,
    BLOCK_MODEL_BED_FOOT_NEG_X,
    BLOCK_MODEL_BED_FOOT_NEG_Z,
    BLOCK_MODEL_LECTERN,
    BLOCK_MODEL_TOP_SLAB,
    BLOCK_MODEL_LILY_PAD,
};

typedef struct {
    // bit flags indexed by direction of full faces
    unsigned char full_face_flags;
    // bit flags for pole supporting faces
    unsigned char pole_face_flags;
    // bit flags for faces that are non-empty as 1x1x1 cube
    unsigned char non_empty_face_flags;
} support_model;

enum block_property {
    BLOCK_PROPERTY_ATTACHED,
    BLOCK_PROPERTY_BOTTOM,
    BLOCK_PROPERTY_CONDITIONAL,
    BLOCK_PROPERTY_DISARMED,
    BLOCK_PROPERTY_DRAG,
    BLOCK_PROPERTY_ENABLED,
    BLOCK_PROPERTY_EXTENDED,
    BLOCK_PROPERTY_EYE,
    BLOCK_PROPERTY_FALLING,
    BLOCK_PROPERTY_HANGING,
    BLOCK_PROPERTY_HAS_BOTTLE_0,
    BLOCK_PROPERTY_HAS_BOTTLE_1,
    BLOCK_PROPERTY_HAS_BOTTLE_2,
    BLOCK_PROPERTY_HAS_RECORD,
    BLOCK_PROPERTY_HAS_BOOK,
    BLOCK_PROPERTY_INVERTED,
    BLOCK_PROPERTY_IN_WALL,
    BLOCK_PROPERTY_LIT,
    BLOCK_PROPERTY_LOCKED,
    BLOCK_PROPERTY_OCCUPIED,
    BLOCK_PROPERTY_OPEN,
    BLOCK_PROPERTY_PERSISTENT,
    BLOCK_PROPERTY_POWERED,
    BLOCK_PROPERTY_SHORT_PISTON,
    BLOCK_PROPERTY_SIGNAL_FIRE,
    BLOCK_PROPERTY_SNOWY,
    BLOCK_PROPERTY_TRIGGERED,
    BLOCK_PROPERTY_UNSTABLE,
    BLOCK_PROPERTY_WATERLOGGED,
    BLOCK_PROPERTY_VINE_END,
    BLOCK_PROPERTY_BERRIES,
    BLOCK_PROPERTY_HORIZONTAL_AXIS,
    BLOCK_PROPERTY_AXIS,

    // same order as direction enum
    BLOCK_PROPERTY_NEG_Y,
    BLOCK_PROPERTY_POS_Y,
    BLOCK_PROPERTY_NEG_Z,
    BLOCK_PROPERTY_POS_Z,
    BLOCK_PROPERTY_NEG_X,
    BLOCK_PROPERTY_POS_X,

    BLOCK_PROPERTY_FACING,
    BLOCK_PROPERTY_FACING_HOPPER,
    BLOCK_PROPERTY_HORIZONTAL_FACING,
    BLOCK_PROPERTY_JIGSAW_ORIENTATION,
    BLOCK_PROPERTY_ATTACH_FACE,
    BLOCK_PROPERTY_BELL_ATTACHMENT,
    BLOCK_PROPERTY_WALL_POS_X,
    BLOCK_PROPERTY_WALL_NEG_Z,
    BLOCK_PROPERTY_WALL_POS_Z,
    BLOCK_PROPERTY_WALL_NEG_X,
    BLOCK_PROPERTY_REDSTONE_POS_X,
    BLOCK_PROPERTY_REDSTONE_NEG_Z,
    BLOCK_PROPERTY_REDSTONE_POS_Z,
    BLOCK_PROPERTY_REDSTONE_NEG_X,
    BLOCK_PROPERTY_DOUBLE_BLOCK_HALF,
    BLOCK_PROPERTY_HALF,
    BLOCK_PROPERTY_RAIL_SHAPE,
    BLOCK_PROPERTY_RAIL_SHAPE_STRAIGHT,
    BLOCK_PROPERTY_AGE_1,
    BLOCK_PROPERTY_AGE_2,
    BLOCK_PROPERTY_AGE_3,
    BLOCK_PROPERTY_AGE_5,
    BLOCK_PROPERTY_AGE_7,
    BLOCK_PROPERTY_AGE_15,
    BLOCK_PROPERTY_AGE_25,
    BLOCK_PROPERTY_BITES,
    BLOCK_PROPERTY_CANDLES,
    BLOCK_PROPERTY_DELAY,
    BLOCK_PROPERTY_DISTANCE,
    BLOCK_PROPERTY_EGGS,
    BLOCK_PROPERTY_HATCH,
    BLOCK_PROPERTY_LAYERS,
    BLOCK_PROPERTY_LEVEL_CAULDRON,
    BLOCK_PROPERTY_LEVEL_COMPOSTER,
    BLOCK_PROPERTY_LEVEL_HONEY,
    // @NOTE(traks) this is ONLY used for fluids so we can decode it as flowing
    // fluid level. In vanilla MC it is also used for other things
    BLOCK_PROPERTY_LEVEL,
    BLOCK_PROPERTY_LEVEL_LIGHT,
    BLOCK_PROPERTY_MOISTURE,
    BLOCK_PROPERTY_NOTE,
    BLOCK_PROPERTY_PICKLES,
    BLOCK_PROPERTY_POWER,
    BLOCK_PROPERTY_STAGE,
    BLOCK_PROPERTY_STABILITY_DISTANCE,
    BLOCK_PROPERTY_RESPAWN_ANCHOR_CHARGES,
    BLOCK_PROPERTY_ROTATION_16,
    BLOCK_PROPERTY_BED_PART,
    BLOCK_PROPERTY_CHEST_TYPE,
    BLOCK_PROPERTY_MODE_COMPARATOR,
    BLOCK_PROPERTY_DOOR_HINGE,
    BLOCK_PROPERTY_NOTEBLOCK_INSTRUMENT,
    BLOCK_PROPERTY_PISTON_TYPE,
    BLOCK_PROPERTY_SLAB_TYPE,
    BLOCK_PROPERTY_STAIRS_SHAPE,
    BLOCK_PROPERTY_STRUCTUREBLOCK_MODE,
    BLOCK_PROPERTY_BAMBOO_LEAVES,
    BLOCK_PROPERTY_DRIPLEAF_TILT,
    BLOCK_PROPERTY_VERTICAL_DIRECTION,
    BLOCK_PROPERTY_DRIPSTONE_THICKNESS,
    BLOCK_PROPERTY_SCULK_SENSOR_PHASE,
    BLOCK_PROPERTY_COUNT,
};

// @NOTE(traks) This struct is used to modify block properties in a more
// 'natural' way. We don't have to input block property strides and value
// indices manually whenever we want to create a block state with certain
// properties, and we don't have to manually 'decode' block states into usable
// block properties either.
//
// Another benefit is that block states can be treated abstractly: if we want to
// figure out whether a block state is waterlogged, one can easily use this
// struct; we don't need a giant switch statement.
//
// We also transform some value indices into proper values, so e.g. true is 1
// instead of 0, directions always use the direction enum values, and axis
// always use the axis enum values.

// @TODO(traks) perhaps we should change boolean properties into flags of a long
// field and add some other things such as fluid level, collision model,
// support model, etc. just for convenience. Would also be nice to deduplicate
// some fields such as facing & age.
typedef struct {
    u64 available_properties[2];
    u16 block_type;

    union {
        u8 values[BLOCK_PROPERTY_COUNT];
        struct {
            u8 attached;
            u8 bottom;
            u8 conditional;
            u8 disarmed;
            u8 drag;
            u8 enabled;
            u8 extended;
            u8 eye;
            u8 falling;
            u8 hanging;
            u8 has_bottle_0;
            u8 has_bottle_1;
            u8 has_bottle_2;
            u8 has_record;
            u8 has_book;
            u8 inverted;
            u8 in_wall;
            u8 lit;
            u8 locked;
            u8 occupied;
            u8 open;
            u8 persistent;
            u8 powered;
            u8 short_piston;
            u8 signal_fire;
            u8 snowy;
            u8 triggered;
            u8 unstable;
            u8 waterlogged;
            u8 vine_end;
            u8 berries;
            u8 horizontal_axis;
            u8 axis;
            u8 neg_y;
            u8 pos_y;
            u8 neg_z;
            u8 pos_z;
            u8 neg_x;
            u8 pos_x;
            u8 facing;
            u8 facing_hopper;
            u8 horizontal_facing;
            u8 jigsaw_orientation;
            u8 attach_face;
            u8 bell_attachment;
            u8 wall_pos_x;
            u8 wall_neg_z;
            u8 wall_pos_z;
            u8 wall_neg_x;
            u8 redstone_pos_x;
            u8 redstone_neg_z;
            u8 redstone_pos_z;
            u8 redstone_neg_x;
            u8 double_block_half;
            u8 half;
            u8 rail_shape;
            u8 rail_shape_straight;
            u8 age_1;
            u8 age_2;
            u8 age_3;
            u8 age_5;
            u8 age_7;
            u8 age_15;
            u8 age_25;
            u8 bites;
            u8 candles;
            u8 delay;
            u8 distance;
            u8 eggs;
            u8 hatch;
            u8 layers;
            u8 level_cauldron;
            u8 level_composter;
            u8 level_honey;
            u8 level;
            u8 level_light;
            u8 moisture;
            u8 note;
            u8 pickles;
            u8 power;
            u8 stage;
            u8 stability_distance;
            u8 respawn_anchor_charges;
            u8 rotation_16;
            u8 bed_part;
            u8 chest_type;
            u8 mode_comparator;
            u8 door_hinge;
            u8 noteblock_instrument;
            u8 piston_type;
            u8 slab_type;
            u8 stairs_shape;
            u8 structureblock_mode;
            u8 bamboo_leaves;
            u8 dripleaf_tilt;
            u8 vertical_direction;
            u8 dripstone_thickness;
            u8 sculk_sensor_phase;
        };
    };
} block_state_info;

enum item_type {
    ITEM_AIR,
    ITEM_STONE,
    ITEM_GRANITE,
    ITEM_POLISHED_GRANITE,
    ITEM_DIORITE,
    ITEM_POLISHED_DIORITE,
    ITEM_ANDESITE,
    ITEM_POLISHED_ANDESITE,
    ITEM_DEEPSLATE,
    ITEM_COBBLED_DEEPSLATE,
    ITEM_POLISHED_DEEPSLATE,
    ITEM_CALCITE,
    ITEM_TUFF,
    ITEM_DRIPSTONE_BLOCK,
    ITEM_GRASS_BLOCK,
    ITEM_DIRT,
    ITEM_COARSE_DIRT,
    ITEM_PODZOL,
    ITEM_ROOTED_DIRT,
    ITEM_CRIMSON_NYLIUM,
    ITEM_WARPED_NYLIUM,
    ITEM_COBBLESTONE,
    ITEM_OAK_PLANKS,
    ITEM_SPRUCE_PLANKS,
    ITEM_BIRCH_PLANKS,
    ITEM_JUNGLE_PLANKS,
    ITEM_ACACIA_PLANKS,
    ITEM_DARK_OAK_PLANKS,
    ITEM_CRIMSON_PLANKS,
    ITEM_WARPED_PLANKS,
    ITEM_OAK_SAPLING,
    ITEM_SPRUCE_SAPLING,
    ITEM_BIRCH_SAPLING,
    ITEM_JUNGLE_SAPLING,
    ITEM_ACACIA_SAPLING,
    ITEM_DARK_OAK_SAPLING,
    ITEM_BEDROCK,
    ITEM_SAND,
    ITEM_RED_SAND,
    ITEM_GRAVEL,
    ITEM_COAL_ORE,
    ITEM_DEEPSLATE_COAL_ORE,
    ITEM_IRON_ORE,
    ITEM_DEEPSLATE_IRON_ORE,
    ITEM_COPPER_ORE,
    ITEM_DEEPSLATE_COPPER_ORE,
    ITEM_GOLD_ORE,
    ITEM_DEEPSLATE_GOLD_ORE,
    ITEM_REDSTONE_ORE,
    ITEM_DEEPSLATE_REDSTONE_ORE,
    ITEM_EMERALD_ORE,
    ITEM_DEEPSLATE_EMERALD_ORE,
    ITEM_LAPIS_ORE,
    ITEM_DEEPSLATE_LAPIS_ORE,
    ITEM_DIAMOND_ORE,
    ITEM_DEEPSLATE_DIAMOND_ORE,
    ITEM_NETHER_GOLD_ORE,
    ITEM_NETHER_QUARTZ_ORE,
    ITEM_ANCIENT_DEBRIS,
    ITEM_COAL_BLOCK,
    ITEM_RAW_IRON_BLOCK,
    ITEM_RAW_COPPER_BLOCK,
    ITEM_RAW_GOLD_BLOCK,
    ITEM_AMETHYST_BLOCK,
    ITEM_BUDDING_AMETHYST,
    ITEM_IRON_BLOCK,
    ITEM_COPPER_BLOCK,
    ITEM_GOLD_BLOCK,
    ITEM_DIAMOND_BLOCK,
    ITEM_NETHERITE_BLOCK,
    ITEM_EXPOSED_COPPER,
    ITEM_WEATHERED_COPPER,
    ITEM_OXIDIZED_COPPER,
    ITEM_CUT_COPPER,
    ITEM_EXPOSED_CUT_COPPER,
    ITEM_WEATHERED_CUT_COPPER,
    ITEM_OXIDIZED_CUT_COPPER,
    ITEM_CUT_COPPER_STAIRS,
    ITEM_EXPOSED_CUT_COPPER_STAIRS,
    ITEM_WEATHERED_CUT_COPPER_STAIRS,
    ITEM_OXIDIZED_CUT_COPPER_STAIRS,
    ITEM_CUT_COPPER_SLAB,
    ITEM_EXPOSED_CUT_COPPER_SLAB,
    ITEM_WEATHERED_CUT_COPPER_SLAB,
    ITEM_OXIDIZED_CUT_COPPER_SLAB,
    ITEM_WAXED_COPPER_BLOCK,
    ITEM_WAXED_EXPOSED_COPPER,
    ITEM_WAXED_WEATHERED_COPPER,
    ITEM_WAXED_OXIDIZED_COPPER,
    ITEM_WAXED_CUT_COPPER,
    ITEM_WAXED_EXPOSED_CUT_COPPER,
    ITEM_WAXED_WEATHERED_CUT_COPPER,
    ITEM_WAXED_OXIDIZED_CUT_COPPER,
    ITEM_WAXED_CUT_COPPER_STAIRS,
    ITEM_WAXED_EXPOSED_CUT_COPPER_STAIRS,
    ITEM_WAXED_WEATHERED_CUT_COPPER_STAIRS,
    ITEM_WAXED_OXIDIZED_CUT_COPPER_STAIRS,
    ITEM_WAXED_CUT_COPPER_SLAB,
    ITEM_WAXED_EXPOSED_CUT_COPPER_SLAB,
    ITEM_WAXED_WEATHERED_CUT_COPPER_SLAB,
    ITEM_WAXED_OXIDIZED_CUT_COPPER_SLAB,
    ITEM_OAK_LOG,
    ITEM_SPRUCE_LOG,
    ITEM_BIRCH_LOG,
    ITEM_JUNGLE_LOG,
    ITEM_ACACIA_LOG,
    ITEM_DARK_OAK_LOG,
    ITEM_CRIMSON_STEM,
    ITEM_WARPED_STEM,
    ITEM_STRIPPED_OAK_LOG,
    ITEM_STRIPPED_SPRUCE_LOG,
    ITEM_STRIPPED_BIRCH_LOG,
    ITEM_STRIPPED_JUNGLE_LOG,
    ITEM_STRIPPED_ACACIA_LOG,
    ITEM_STRIPPED_DARK_OAK_LOG,
    ITEM_STRIPPED_CRIMSON_STEM,
    ITEM_STRIPPED_WARPED_STEM,
    ITEM_STRIPPED_OAK_WOOD,
    ITEM_STRIPPED_SPRUCE_WOOD,
    ITEM_STRIPPED_BIRCH_WOOD,
    ITEM_STRIPPED_JUNGLE_WOOD,
    ITEM_STRIPPED_ACACIA_WOOD,
    ITEM_STRIPPED_DARK_OAK_WOOD,
    ITEM_STRIPPED_CRIMSON_HYPHAE,
    ITEM_STRIPPED_WARPED_HYPHAE,
    ITEM_OAK_WOOD,
    ITEM_SPRUCE_WOOD,
    ITEM_BIRCH_WOOD,
    ITEM_JUNGLE_WOOD,
    ITEM_ACACIA_WOOD,
    ITEM_DARK_OAK_WOOD,
    ITEM_CRIMSON_HYPHAE,
    ITEM_WARPED_HYPHAE,
    ITEM_OAK_LEAVES,
    ITEM_SPRUCE_LEAVES,
    ITEM_BIRCH_LEAVES,
    ITEM_JUNGLE_LEAVES,
    ITEM_ACACIA_LEAVES,
    ITEM_DARK_OAK_LEAVES,
    ITEM_AZALEA_LEAVES,
    ITEM_FLOWERING_AZALEA_LEAVES,
    ITEM_SPONGE,
    ITEM_WET_SPONGE,
    ITEM_GLASS,
    ITEM_TINTED_GLASS,
    ITEM_LAPIS_BLOCK,
    ITEM_SANDSTONE,
    ITEM_CHISELED_SANDSTONE,
    ITEM_CUT_SANDSTONE,
    ITEM_COBWEB,
    ITEM_GRASS,
    ITEM_FERN,
    ITEM_AZALEA,
    ITEM_FLOWERING_AZALEA,
    ITEM_DEAD_BUSH,
    ITEM_SEAGRASS,
    ITEM_SEA_PICKLE,
    ITEM_WHITE_WOOL,
    ITEM_ORANGE_WOOL,
    ITEM_MAGENTA_WOOL,
    ITEM_LIGHT_BLUE_WOOL,
    ITEM_YELLOW_WOOL,
    ITEM_LIME_WOOL,
    ITEM_PINK_WOOL,
    ITEM_GRAY_WOOL,
    ITEM_LIGHT_GRAY_WOOL,
    ITEM_CYAN_WOOL,
    ITEM_PURPLE_WOOL,
    ITEM_BLUE_WOOL,
    ITEM_BROWN_WOOL,
    ITEM_GREEN_WOOL,
    ITEM_RED_WOOL,
    ITEM_BLACK_WOOL,
    ITEM_DANDELION,
    ITEM_POPPY,
    ITEM_BLUE_ORCHID,
    ITEM_ALLIUM,
    ITEM_AZURE_BLUET,
    ITEM_RED_TULIP,
    ITEM_ORANGE_TULIP,
    ITEM_WHITE_TULIP,
    ITEM_PINK_TULIP,
    ITEM_OXEYE_DAISY,
    ITEM_CORNFLOWER,
    ITEM_LILY_OF_THE_VALLEY,
    ITEM_WITHER_ROSE,
    ITEM_SPORE_BLOSSOM,
    ITEM_BROWN_MUSHROOM,
    ITEM_RED_MUSHROOM,
    ITEM_CRIMSON_FUNGUS,
    ITEM_WARPED_FUNGUS,
    ITEM_CRIMSON_ROOTS,
    ITEM_WARPED_ROOTS,
    ITEM_NETHER_SPROUTS,
    ITEM_WEEPING_VINES,
    ITEM_TWISTING_VINES,
    ITEM_SUGAR_CANE,
    ITEM_KELP,
    ITEM_MOSS_CARPET,
    ITEM_MOSS_BLOCK,
    ITEM_HANGING_ROOTS,
    ITEM_BIG_DRIPLEAF,
    ITEM_SMALL_DRIPLEAF,
    ITEM_BAMBOO,
    ITEM_OAK_SLAB,
    ITEM_SPRUCE_SLAB,
    ITEM_BIRCH_SLAB,
    ITEM_JUNGLE_SLAB,
    ITEM_ACACIA_SLAB,
    ITEM_DARK_OAK_SLAB,
    ITEM_CRIMSON_SLAB,
    ITEM_WARPED_SLAB,
    ITEM_STONE_SLAB,
    ITEM_SMOOTH_STONE_SLAB,
    ITEM_SANDSTONE_SLAB,
    ITEM_CUT_SANDSTONE_SLAB,
    ITEM_PETRIFIED_OAK_SLAB,
    ITEM_COBBLESTONE_SLAB,
    ITEM_BRICK_SLAB,
    ITEM_STONE_BRICK_SLAB,
    ITEM_NETHER_BRICK_SLAB,
    ITEM_QUARTZ_SLAB,
    ITEM_RED_SANDSTONE_SLAB,
    ITEM_CUT_RED_SANDSTONE_SLAB,
    ITEM_PURPUR_SLAB,
    ITEM_PRISMARINE_SLAB,
    ITEM_PRISMARINE_BRICK_SLAB,
    ITEM_DARK_PRISMARINE_SLAB,
    ITEM_SMOOTH_QUARTZ,
    ITEM_SMOOTH_RED_SANDSTONE,
    ITEM_SMOOTH_SANDSTONE,
    ITEM_SMOOTH_STONE,
    ITEM_BRICKS,
    ITEM_BOOKSHELF,
    ITEM_MOSSY_COBBLESTONE,
    ITEM_OBSIDIAN,
    ITEM_TORCH,
    ITEM_END_ROD,
    ITEM_CHORUS_PLANT,
    ITEM_CHORUS_FLOWER,
    ITEM_PURPUR_BLOCK,
    ITEM_PURPUR_PILLAR,
    ITEM_PURPUR_STAIRS,
    ITEM_SPAWNER,
    ITEM_OAK_STAIRS,
    ITEM_CHEST,
    ITEM_CRAFTING_TABLE,
    ITEM_FARMLAND,
    ITEM_FURNACE,
    ITEM_LADDER,
    ITEM_COBBLESTONE_STAIRS,
    ITEM_SNOW,
    ITEM_ICE,
    ITEM_SNOW_BLOCK,
    ITEM_CACTUS,
    ITEM_CLAY,
    ITEM_JUKEBOX,
    ITEM_OAK_FENCE,
    ITEM_SPRUCE_FENCE,
    ITEM_BIRCH_FENCE,
    ITEM_JUNGLE_FENCE,
    ITEM_ACACIA_FENCE,
    ITEM_DARK_OAK_FENCE,
    ITEM_CRIMSON_FENCE,
    ITEM_WARPED_FENCE,
    ITEM_PUMPKIN,
    ITEM_CARVED_PUMPKIN,
    ITEM_JACK_O_LANTERN,
    ITEM_NETHERRACK,
    ITEM_SOUL_SAND,
    ITEM_SOUL_SOIL,
    ITEM_BASALT,
    ITEM_POLISHED_BASALT,
    ITEM_SMOOTH_BASALT,
    ITEM_SOUL_TORCH,
    ITEM_GLOWSTONE,
    ITEM_INFESTED_STONE,
    ITEM_INFESTED_COBBLESTONE,
    ITEM_INFESTED_STONE_BRICKS,
    ITEM_INFESTED_MOSSY_STONE_BRICKS,
    ITEM_INFESTED_CRACKED_STONE_BRICKS,
    ITEM_INFESTED_CHISELED_STONE_BRICKS,
    ITEM_INFESTED_DEEPSLATE,
    ITEM_STONE_BRICKS,
    ITEM_MOSSY_STONE_BRICKS,
    ITEM_CRACKED_STONE_BRICKS,
    ITEM_CHISELED_STONE_BRICKS,
    ITEM_DEEPSLATE_BRICKS,
    ITEM_CRACKED_DEEPSLATE_BRICKS,
    ITEM_DEEPSLATE_TILES,
    ITEM_CRACKED_DEEPSLATE_TILES,
    ITEM_CHISELED_DEEPSLATE,
    ITEM_BROWN_MUSHROOM_BLOCK,
    ITEM_RED_MUSHROOM_BLOCK,
    ITEM_MUSHROOM_STEM,
    ITEM_IRON_BARS,
    ITEM_CHAIN,
    ITEM_GLASS_PANE,
    ITEM_MELON,
    ITEM_VINE,
    ITEM_GLOW_LICHEN,
    ITEM_BRICK_STAIRS,
    ITEM_STONE_BRICK_STAIRS,
    ITEM_MYCELIUM,
    ITEM_LILY_PAD,
    ITEM_NETHER_BRICKS,
    ITEM_CRACKED_NETHER_BRICKS,
    ITEM_CHISELED_NETHER_BRICKS,
    ITEM_NETHER_BRICK_FENCE,
    ITEM_NETHER_BRICK_STAIRS,
    ITEM_ENCHANTING_TABLE,
    ITEM_END_PORTAL_FRAME,
    ITEM_END_STONE,
    ITEM_END_STONE_BRICKS,
    ITEM_DRAGON_EGG,
    ITEM_SANDSTONE_STAIRS,
    ITEM_ENDER_CHEST,
    ITEM_EMERALD_BLOCK,
    ITEM_SPRUCE_STAIRS,
    ITEM_BIRCH_STAIRS,
    ITEM_JUNGLE_STAIRS,
    ITEM_CRIMSON_STAIRS,
    ITEM_WARPED_STAIRS,
    ITEM_COMMAND_BLOCK,
    ITEM_BEACON,
    ITEM_COBBLESTONE_WALL,
    ITEM_MOSSY_COBBLESTONE_WALL,
    ITEM_BRICK_WALL,
    ITEM_PRISMARINE_WALL,
    ITEM_RED_SANDSTONE_WALL,
    ITEM_MOSSY_STONE_BRICK_WALL,
    ITEM_GRANITE_WALL,
    ITEM_STONE_BRICK_WALL,
    ITEM_NETHER_BRICK_WALL,
    ITEM_ANDESITE_WALL,
    ITEM_RED_NETHER_BRICK_WALL,
    ITEM_SANDSTONE_WALL,
    ITEM_END_STONE_BRICK_WALL,
    ITEM_DIORITE_WALL,
    ITEM_BLACKSTONE_WALL,
    ITEM_POLISHED_BLACKSTONE_WALL,
    ITEM_POLISHED_BLACKSTONE_BRICK_WALL,
    ITEM_COBBLED_DEEPSLATE_WALL,
    ITEM_POLISHED_DEEPSLATE_WALL,
    ITEM_DEEPSLATE_BRICK_WALL,
    ITEM_DEEPSLATE_TILE_WALL,
    ITEM_ANVIL,
    ITEM_CHIPPED_ANVIL,
    ITEM_DAMAGED_ANVIL,
    ITEM_CHISELED_QUARTZ_BLOCK,
    ITEM_QUARTZ_BLOCK,
    ITEM_QUARTZ_BRICKS,
    ITEM_QUARTZ_PILLAR,
    ITEM_QUARTZ_STAIRS,
    ITEM_WHITE_TERRACOTTA,
    ITEM_ORANGE_TERRACOTTA,
    ITEM_MAGENTA_TERRACOTTA,
    ITEM_LIGHT_BLUE_TERRACOTTA,
    ITEM_YELLOW_TERRACOTTA,
    ITEM_LIME_TERRACOTTA,
    ITEM_PINK_TERRACOTTA,
    ITEM_GRAY_TERRACOTTA,
    ITEM_LIGHT_GRAY_TERRACOTTA,
    ITEM_CYAN_TERRACOTTA,
    ITEM_PURPLE_TERRACOTTA,
    ITEM_BLUE_TERRACOTTA,
    ITEM_BROWN_TERRACOTTA,
    ITEM_GREEN_TERRACOTTA,
    ITEM_RED_TERRACOTTA,
    ITEM_BLACK_TERRACOTTA,
    ITEM_BARRIER,
    ITEM_LIGHT,
    ITEM_HAY_BLOCK,
    ITEM_WHITE_CARPET,
    ITEM_ORANGE_CARPET,
    ITEM_MAGENTA_CARPET,
    ITEM_LIGHT_BLUE_CARPET,
    ITEM_YELLOW_CARPET,
    ITEM_LIME_CARPET,
    ITEM_PINK_CARPET,
    ITEM_GRAY_CARPET,
    ITEM_LIGHT_GRAY_CARPET,
    ITEM_CYAN_CARPET,
    ITEM_PURPLE_CARPET,
    ITEM_BLUE_CARPET,
    ITEM_BROWN_CARPET,
    ITEM_GREEN_CARPET,
    ITEM_RED_CARPET,
    ITEM_BLACK_CARPET,
    ITEM_TERRACOTTA,
    ITEM_PACKED_ICE,
    ITEM_ACACIA_STAIRS,
    ITEM_DARK_OAK_STAIRS,
    ITEM_DIRT_PATH,
    ITEM_SUNFLOWER,
    ITEM_LILAC,
    ITEM_ROSE_BUSH,
    ITEM_PEONY,
    ITEM_TALL_GRASS,
    ITEM_LARGE_FERN,
    ITEM_WHITE_STAINED_GLASS,
    ITEM_ORANGE_STAINED_GLASS,
    ITEM_MAGENTA_STAINED_GLASS,
    ITEM_LIGHT_BLUE_STAINED_GLASS,
    ITEM_YELLOW_STAINED_GLASS,
    ITEM_LIME_STAINED_GLASS,
    ITEM_PINK_STAINED_GLASS,
    ITEM_GRAY_STAINED_GLASS,
    ITEM_LIGHT_GRAY_STAINED_GLASS,
    ITEM_CYAN_STAINED_GLASS,
    ITEM_PURPLE_STAINED_GLASS,
    ITEM_BLUE_STAINED_GLASS,
    ITEM_BROWN_STAINED_GLASS,
    ITEM_GREEN_STAINED_GLASS,
    ITEM_RED_STAINED_GLASS,
    ITEM_BLACK_STAINED_GLASS,
    ITEM_WHITE_STAINED_GLASS_PANE,
    ITEM_ORANGE_STAINED_GLASS_PANE,
    ITEM_MAGENTA_STAINED_GLASS_PANE,
    ITEM_LIGHT_BLUE_STAINED_GLASS_PANE,
    ITEM_YELLOW_STAINED_GLASS_PANE,
    ITEM_LIME_STAINED_GLASS_PANE,
    ITEM_PINK_STAINED_GLASS_PANE,
    ITEM_GRAY_STAINED_GLASS_PANE,
    ITEM_LIGHT_GRAY_STAINED_GLASS_PANE,
    ITEM_CYAN_STAINED_GLASS_PANE,
    ITEM_PURPLE_STAINED_GLASS_PANE,
    ITEM_BLUE_STAINED_GLASS_PANE,
    ITEM_BROWN_STAINED_GLASS_PANE,
    ITEM_GREEN_STAINED_GLASS_PANE,
    ITEM_RED_STAINED_GLASS_PANE,
    ITEM_BLACK_STAINED_GLASS_PANE,
    ITEM_PRISMARINE,
    ITEM_PRISMARINE_BRICKS,
    ITEM_DARK_PRISMARINE,
    ITEM_PRISMARINE_STAIRS,
    ITEM_PRISMARINE_BRICK_STAIRS,
    ITEM_DARK_PRISMARINE_STAIRS,
    ITEM_SEA_LANTERN,
    ITEM_RED_SANDSTONE,
    ITEM_CHISELED_RED_SANDSTONE,
    ITEM_CUT_RED_SANDSTONE,
    ITEM_RED_SANDSTONE_STAIRS,
    ITEM_REPEATING_COMMAND_BLOCK,
    ITEM_CHAIN_COMMAND_BLOCK,
    ITEM_MAGMA_BLOCK,
    ITEM_NETHER_WART_BLOCK,
    ITEM_WARPED_WART_BLOCK,
    ITEM_RED_NETHER_BRICKS,
    ITEM_BONE_BLOCK,
    ITEM_STRUCTURE_VOID,
    ITEM_SHULKER_BOX,
    ITEM_WHITE_SHULKER_BOX,
    ITEM_ORANGE_SHULKER_BOX,
    ITEM_MAGENTA_SHULKER_BOX,
    ITEM_LIGHT_BLUE_SHULKER_BOX,
    ITEM_YELLOW_SHULKER_BOX,
    ITEM_LIME_SHULKER_BOX,
    ITEM_PINK_SHULKER_BOX,
    ITEM_GRAY_SHULKER_BOX,
    ITEM_LIGHT_GRAY_SHULKER_BOX,
    ITEM_CYAN_SHULKER_BOX,
    ITEM_PURPLE_SHULKER_BOX,
    ITEM_BLUE_SHULKER_BOX,
    ITEM_BROWN_SHULKER_BOX,
    ITEM_GREEN_SHULKER_BOX,
    ITEM_RED_SHULKER_BOX,
    ITEM_BLACK_SHULKER_BOX,
    ITEM_WHITE_GLAZED_TERRACOTTA,
    ITEM_ORANGE_GLAZED_TERRACOTTA,
    ITEM_MAGENTA_GLAZED_TERRACOTTA,
    ITEM_LIGHT_BLUE_GLAZED_TERRACOTTA,
    ITEM_YELLOW_GLAZED_TERRACOTTA,
    ITEM_LIME_GLAZED_TERRACOTTA,
    ITEM_PINK_GLAZED_TERRACOTTA,
    ITEM_GRAY_GLAZED_TERRACOTTA,
    ITEM_LIGHT_GRAY_GLAZED_TERRACOTTA,
    ITEM_CYAN_GLAZED_TERRACOTTA,
    ITEM_PURPLE_GLAZED_TERRACOTTA,
    ITEM_BLUE_GLAZED_TERRACOTTA,
    ITEM_BROWN_GLAZED_TERRACOTTA,
    ITEM_GREEN_GLAZED_TERRACOTTA,
    ITEM_RED_GLAZED_TERRACOTTA,
    ITEM_BLACK_GLAZED_TERRACOTTA,
    ITEM_WHITE_CONCRETE,
    ITEM_ORANGE_CONCRETE,
    ITEM_MAGENTA_CONCRETE,
    ITEM_LIGHT_BLUE_CONCRETE,
    ITEM_YELLOW_CONCRETE,
    ITEM_LIME_CONCRETE,
    ITEM_PINK_CONCRETE,
    ITEM_GRAY_CONCRETE,
    ITEM_LIGHT_GRAY_CONCRETE,
    ITEM_CYAN_CONCRETE,
    ITEM_PURPLE_CONCRETE,
    ITEM_BLUE_CONCRETE,
    ITEM_BROWN_CONCRETE,
    ITEM_GREEN_CONCRETE,
    ITEM_RED_CONCRETE,
    ITEM_BLACK_CONCRETE,
    ITEM_WHITE_CONCRETE_POWDER,
    ITEM_ORANGE_CONCRETE_POWDER,
    ITEM_MAGENTA_CONCRETE_POWDER,
    ITEM_LIGHT_BLUE_CONCRETE_POWDER,
    ITEM_YELLOW_CONCRETE_POWDER,
    ITEM_LIME_CONCRETE_POWDER,
    ITEM_PINK_CONCRETE_POWDER,
    ITEM_GRAY_CONCRETE_POWDER,
    ITEM_LIGHT_GRAY_CONCRETE_POWDER,
    ITEM_CYAN_CONCRETE_POWDER,
    ITEM_PURPLE_CONCRETE_POWDER,
    ITEM_BLUE_CONCRETE_POWDER,
    ITEM_BROWN_CONCRETE_POWDER,
    ITEM_GREEN_CONCRETE_POWDER,
    ITEM_RED_CONCRETE_POWDER,
    ITEM_BLACK_CONCRETE_POWDER,
    ITEM_TURTLE_EGG,
    ITEM_DEAD_TUBE_CORAL_BLOCK,
    ITEM_DEAD_BRAIN_CORAL_BLOCK,
    ITEM_DEAD_BUBBLE_CORAL_BLOCK,
    ITEM_DEAD_FIRE_CORAL_BLOCK,
    ITEM_DEAD_HORN_CORAL_BLOCK,
    ITEM_TUBE_CORAL_BLOCK,
    ITEM_BRAIN_CORAL_BLOCK,
    ITEM_BUBBLE_CORAL_BLOCK,
    ITEM_FIRE_CORAL_BLOCK,
    ITEM_HORN_CORAL_BLOCK,
    ITEM_TUBE_CORAL,
    ITEM_BRAIN_CORAL,
    ITEM_BUBBLE_CORAL,
    ITEM_FIRE_CORAL,
    ITEM_HORN_CORAL,
    ITEM_DEAD_BRAIN_CORAL,
    ITEM_DEAD_BUBBLE_CORAL,
    ITEM_DEAD_FIRE_CORAL,
    ITEM_DEAD_HORN_CORAL,
    ITEM_DEAD_TUBE_CORAL,
    ITEM_TUBE_CORAL_FAN,
    ITEM_BRAIN_CORAL_FAN,
    ITEM_BUBBLE_CORAL_FAN,
    ITEM_FIRE_CORAL_FAN,
    ITEM_HORN_CORAL_FAN,
    ITEM_DEAD_TUBE_CORAL_FAN,
    ITEM_DEAD_BRAIN_CORAL_FAN,
    ITEM_DEAD_BUBBLE_CORAL_FAN,
    ITEM_DEAD_FIRE_CORAL_FAN,
    ITEM_DEAD_HORN_CORAL_FAN,
    ITEM_BLUE_ICE,
    ITEM_CONDUIT,
    ITEM_POLISHED_GRANITE_STAIRS,
    ITEM_SMOOTH_RED_SANDSTONE_STAIRS,
    ITEM_MOSSY_STONE_BRICK_STAIRS,
    ITEM_POLISHED_DIORITE_STAIRS,
    ITEM_MOSSY_COBBLESTONE_STAIRS,
    ITEM_END_STONE_BRICK_STAIRS,
    ITEM_STONE_STAIRS,
    ITEM_SMOOTH_SANDSTONE_STAIRS,
    ITEM_SMOOTH_QUARTZ_STAIRS,
    ITEM_GRANITE_STAIRS,
    ITEM_ANDESITE_STAIRS,
    ITEM_RED_NETHER_BRICK_STAIRS,
    ITEM_POLISHED_ANDESITE_STAIRS,
    ITEM_DIORITE_STAIRS,
    ITEM_COBBLED_DEEPSLATE_STAIRS,
    ITEM_POLISHED_DEEPSLATE_STAIRS,
    ITEM_DEEPSLATE_BRICK_STAIRS,
    ITEM_DEEPSLATE_TILE_STAIRS,
    ITEM_POLISHED_GRANITE_SLAB,
    ITEM_SMOOTH_RED_SANDSTONE_SLAB,
    ITEM_MOSSY_STONE_BRICK_SLAB,
    ITEM_POLISHED_DIORITE_SLAB,
    ITEM_MOSSY_COBBLESTONE_SLAB,
    ITEM_END_STONE_BRICK_SLAB,
    ITEM_SMOOTH_SANDSTONE_SLAB,
    ITEM_SMOOTH_QUARTZ_SLAB,
    ITEM_GRANITE_SLAB,
    ITEM_ANDESITE_SLAB,
    ITEM_RED_NETHER_BRICK_SLAB,
    ITEM_POLISHED_ANDESITE_SLAB,
    ITEM_DIORITE_SLAB,
    ITEM_COBBLED_DEEPSLATE_SLAB,
    ITEM_POLISHED_DEEPSLATE_SLAB,
    ITEM_DEEPSLATE_BRICK_SLAB,
    ITEM_DEEPSLATE_TILE_SLAB,
    ITEM_SCAFFOLDING,
    ITEM_REDSTONE,
    ITEM_REDSTONE_TORCH,
    ITEM_REDSTONE_BLOCK,
    ITEM_REPEATER,
    ITEM_COMPARATOR,
    ITEM_PISTON,
    ITEM_STICKY_PISTON,
    ITEM_SLIME_BLOCK,
    ITEM_HONEY_BLOCK,
    ITEM_OBSERVER,
    ITEM_HOPPER,
    ITEM_DISPENSER,
    ITEM_DROPPER,
    ITEM_LECTERN,
    ITEM_TARGET,
    ITEM_LEVER,
    ITEM_LIGHTNING_ROD,
    ITEM_DAYLIGHT_DETECTOR,
    ITEM_SCULK_SENSOR,
    ITEM_TRIPWIRE_HOOK,
    ITEM_TRAPPED_CHEST,
    ITEM_TNT,
    ITEM_REDSTONE_LAMP,
    ITEM_NOTE_BLOCK,
    ITEM_STONE_BUTTON,
    ITEM_POLISHED_BLACKSTONE_BUTTON,
    ITEM_OAK_BUTTON,
    ITEM_SPRUCE_BUTTON,
    ITEM_BIRCH_BUTTON,
    ITEM_JUNGLE_BUTTON,
    ITEM_ACACIA_BUTTON,
    ITEM_DARK_OAK_BUTTON,
    ITEM_CRIMSON_BUTTON,
    ITEM_WARPED_BUTTON,
    ITEM_STONE_PRESSURE_PLATE,
    ITEM_POLISHED_BLACKSTONE_PRESSURE_PLATE,
    ITEM_LIGHT_WEIGHTED_PRESSURE_PLATE,
    ITEM_HEAVY_WEIGHTED_PRESSURE_PLATE,
    ITEM_OAK_PRESSURE_PLATE,
    ITEM_SPRUCE_PRESSURE_PLATE,
    ITEM_BIRCH_PRESSURE_PLATE,
    ITEM_JUNGLE_PRESSURE_PLATE,
    ITEM_ACACIA_PRESSURE_PLATE,
    ITEM_DARK_OAK_PRESSURE_PLATE,
    ITEM_CRIMSON_PRESSURE_PLATE,
    ITEM_WARPED_PRESSURE_PLATE,
    ITEM_IRON_DOOR,
    ITEM_OAK_DOOR,
    ITEM_SPRUCE_DOOR,
    ITEM_BIRCH_DOOR,
    ITEM_JUNGLE_DOOR,
    ITEM_ACACIA_DOOR,
    ITEM_DARK_OAK_DOOR,
    ITEM_CRIMSON_DOOR,
    ITEM_WARPED_DOOR,
    ITEM_IRON_TRAPDOOR,
    ITEM_OAK_TRAPDOOR,
    ITEM_SPRUCE_TRAPDOOR,
    ITEM_BIRCH_TRAPDOOR,
    ITEM_JUNGLE_TRAPDOOR,
    ITEM_ACACIA_TRAPDOOR,
    ITEM_DARK_OAK_TRAPDOOR,
    ITEM_CRIMSON_TRAPDOOR,
    ITEM_WARPED_TRAPDOOR,
    ITEM_OAK_FENCE_GATE,
    ITEM_SPRUCE_FENCE_GATE,
    ITEM_BIRCH_FENCE_GATE,
    ITEM_JUNGLE_FENCE_GATE,
    ITEM_ACACIA_FENCE_GATE,
    ITEM_DARK_OAK_FENCE_GATE,
    ITEM_CRIMSON_FENCE_GATE,
    ITEM_WARPED_FENCE_GATE,
    ITEM_POWERED_RAIL,
    ITEM_DETECTOR_RAIL,
    ITEM_RAIL,
    ITEM_ACTIVATOR_RAIL,
    ITEM_SADDLE,
    ITEM_MINECART,
    ITEM_CHEST_MINECART,
    ITEM_FURNACE_MINECART,
    ITEM_TNT_MINECART,
    ITEM_HOPPER_MINECART,
    ITEM_CARROT_ON_A_STICK,
    ITEM_WARPED_FUNGUS_ON_A_STICK,
    ITEM_ELYTRA,
    ITEM_OAK_BOAT,
    ITEM_SPRUCE_BOAT,
    ITEM_BIRCH_BOAT,
    ITEM_JUNGLE_BOAT,
    ITEM_ACACIA_BOAT,
    ITEM_DARK_OAK_BOAT,
    ITEM_STRUCTURE_BLOCK,
    ITEM_JIGSAW,
    ITEM_TURTLE_HELMET,
    ITEM_SCUTE,
    ITEM_FLINT_AND_STEEL,
    ITEM_APPLE,
    ITEM_BOW,
    ITEM_ARROW,
    ITEM_COAL,
    ITEM_CHARCOAL,
    ITEM_DIAMOND,
    ITEM_EMERALD,
    ITEM_LAPIS_LAZULI,
    ITEM_QUARTZ,
    ITEM_AMETHYST_SHARD,
    ITEM_RAW_IRON,
    ITEM_IRON_INGOT,
    ITEM_RAW_COPPER,
    ITEM_COPPER_INGOT,
    ITEM_RAW_GOLD,
    ITEM_GOLD_INGOT,
    ITEM_NETHERITE_INGOT,
    ITEM_NETHERITE_SCRAP,
    ITEM_WOODEN_SWORD,
    ITEM_WOODEN_SHOVEL,
    ITEM_WOODEN_PICKAXE,
    ITEM_WOODEN_AXE,
    ITEM_WOODEN_HOE,
    ITEM_STONE_SWORD,
    ITEM_STONE_SHOVEL,
    ITEM_STONE_PICKAXE,
    ITEM_STONE_AXE,
    ITEM_STONE_HOE,
    ITEM_GOLDEN_SWORD,
    ITEM_GOLDEN_SHOVEL,
    ITEM_GOLDEN_PICKAXE,
    ITEM_GOLDEN_AXE,
    ITEM_GOLDEN_HOE,
    ITEM_IRON_SWORD,
    ITEM_IRON_SHOVEL,
    ITEM_IRON_PICKAXE,
    ITEM_IRON_AXE,
    ITEM_IRON_HOE,
    ITEM_DIAMOND_SWORD,
    ITEM_DIAMOND_SHOVEL,
    ITEM_DIAMOND_PICKAXE,
    ITEM_DIAMOND_AXE,
    ITEM_DIAMOND_HOE,
    ITEM_NETHERITE_SWORD,
    ITEM_NETHERITE_SHOVEL,
    ITEM_NETHERITE_PICKAXE,
    ITEM_NETHERITE_AXE,
    ITEM_NETHERITE_HOE,
    ITEM_STICK,
    ITEM_BOWL,
    ITEM_MUSHROOM_STEW,
    ITEM_STRING,
    ITEM_FEATHER,
    ITEM_GUNPOWDER,
    ITEM_WHEAT_SEEDS,
    ITEM_WHEAT,
    ITEM_BREAD,
    ITEM_LEATHER_HELMET,
    ITEM_LEATHER_CHESTPLATE,
    ITEM_LEATHER_LEGGINGS,
    ITEM_LEATHER_BOOTS,
    ITEM_CHAINMAIL_HELMET,
    ITEM_CHAINMAIL_CHESTPLATE,
    ITEM_CHAINMAIL_LEGGINGS,
    ITEM_CHAINMAIL_BOOTS,
    ITEM_IRON_HELMET,
    ITEM_IRON_CHESTPLATE,
    ITEM_IRON_LEGGINGS,
    ITEM_IRON_BOOTS,
    ITEM_DIAMOND_HELMET,
    ITEM_DIAMOND_CHESTPLATE,
    ITEM_DIAMOND_LEGGINGS,
    ITEM_DIAMOND_BOOTS,
    ITEM_GOLDEN_HELMET,
    ITEM_GOLDEN_CHESTPLATE,
    ITEM_GOLDEN_LEGGINGS,
    ITEM_GOLDEN_BOOTS,
    ITEM_NETHERITE_HELMET,
    ITEM_NETHERITE_CHESTPLATE,
    ITEM_NETHERITE_LEGGINGS,
    ITEM_NETHERITE_BOOTS,
    ITEM_FLINT,
    ITEM_PORKCHOP,
    ITEM_COOKED_PORKCHOP,
    ITEM_PAINTING,
    ITEM_GOLDEN_APPLE,
    ITEM_ENCHANTED_GOLDEN_APPLE,
    ITEM_OAK_SIGN,
    ITEM_SPRUCE_SIGN,
    ITEM_BIRCH_SIGN,
    ITEM_JUNGLE_SIGN,
    ITEM_ACACIA_SIGN,
    ITEM_DARK_OAK_SIGN,
    ITEM_CRIMSON_SIGN,
    ITEM_WARPED_SIGN,
    ITEM_BUCKET,
    ITEM_WATER_BUCKET,
    ITEM_LAVA_BUCKET,
    ITEM_POWDER_SNOW_BUCKET,
    ITEM_SNOWBALL,
    ITEM_LEATHER,
    ITEM_MILK_BUCKET,
    ITEM_PUFFERFISH_BUCKET,
    ITEM_SALMON_BUCKET,
    ITEM_COD_BUCKET,
    ITEM_TROPICAL_FISH_BUCKET,
    ITEM_AXOLOTL_BUCKET,
    ITEM_BRICK,
    ITEM_CLAY_BALL,
    ITEM_DRIED_KELP_BLOCK,
    ITEM_PAPER,
    ITEM_BOOK,
    ITEM_SLIME_BALL,
    ITEM_EGG,
    ITEM_COMPASS,
    ITEM_BUNDLE,
    ITEM_FISHING_ROD,
    ITEM_CLOCK,
    ITEM_SPYGLASS,
    ITEM_GLOWSTONE_DUST,
    ITEM_COD,
    ITEM_SALMON,
    ITEM_TROPICAL_FISH,
    ITEM_PUFFERFISH,
    ITEM_COOKED_COD,
    ITEM_COOKED_SALMON,
    ITEM_INK_SAC,
    ITEM_GLOW_INK_SAC,
    ITEM_COCOA_BEANS,
    ITEM_WHITE_DYE,
    ITEM_ORANGE_DYE,
    ITEM_MAGENTA_DYE,
    ITEM_LIGHT_BLUE_DYE,
    ITEM_YELLOW_DYE,
    ITEM_LIME_DYE,
    ITEM_PINK_DYE,
    ITEM_GRAY_DYE,
    ITEM_LIGHT_GRAY_DYE,
    ITEM_CYAN_DYE,
    ITEM_PURPLE_DYE,
    ITEM_BLUE_DYE,
    ITEM_BROWN_DYE,
    ITEM_GREEN_DYE,
    ITEM_RED_DYE,
    ITEM_BLACK_DYE,
    ITEM_BONE_MEAL,
    ITEM_BONE,
    ITEM_SUGAR,
    ITEM_CAKE,
    ITEM_WHITE_BED,
    ITEM_ORANGE_BED,
    ITEM_MAGENTA_BED,
    ITEM_LIGHT_BLUE_BED,
    ITEM_YELLOW_BED,
    ITEM_LIME_BED,
    ITEM_PINK_BED,
    ITEM_GRAY_BED,
    ITEM_LIGHT_GRAY_BED,
    ITEM_CYAN_BED,
    ITEM_PURPLE_BED,
    ITEM_BLUE_BED,
    ITEM_BROWN_BED,
    ITEM_GREEN_BED,
    ITEM_RED_BED,
    ITEM_BLACK_BED,
    ITEM_COOKIE,
    ITEM_FILLED_MAP,
    ITEM_SHEARS,
    ITEM_MELON_SLICE,
    ITEM_DRIED_KELP,
    ITEM_PUMPKIN_SEEDS,
    ITEM_MELON_SEEDS,
    ITEM_BEEF,
    ITEM_COOKED_BEEF,
    ITEM_CHICKEN,
    ITEM_COOKED_CHICKEN,
    ITEM_ROTTEN_FLESH,
    ITEM_ENDER_PEARL,
    ITEM_BLAZE_ROD,
    ITEM_GHAST_TEAR,
    ITEM_GOLD_NUGGET,
    ITEM_NETHER_WART,
    ITEM_POTION,
    ITEM_GLASS_BOTTLE,
    ITEM_SPIDER_EYE,
    ITEM_FERMENTED_SPIDER_EYE,
    ITEM_BLAZE_POWDER,
    ITEM_MAGMA_CREAM,
    ITEM_BREWING_STAND,
    ITEM_CAULDRON,
    ITEM_ENDER_EYE,
    ITEM_GLISTERING_MELON_SLICE,
    ITEM_AXOLOTL_SPAWN_EGG,
    ITEM_BAT_SPAWN_EGG,
    ITEM_BEE_SPAWN_EGG,
    ITEM_BLAZE_SPAWN_EGG,
    ITEM_CAT_SPAWN_EGG,
    ITEM_CAVE_SPIDER_SPAWN_EGG,
    ITEM_CHICKEN_SPAWN_EGG,
    ITEM_COD_SPAWN_EGG,
    ITEM_COW_SPAWN_EGG,
    ITEM_CREEPER_SPAWN_EGG,
    ITEM_DOLPHIN_SPAWN_EGG,
    ITEM_DONKEY_SPAWN_EGG,
    ITEM_DROWNED_SPAWN_EGG,
    ITEM_ELDER_GUARDIAN_SPAWN_EGG,
    ITEM_ENDERMAN_SPAWN_EGG,
    ITEM_ENDERMITE_SPAWN_EGG,
    ITEM_EVOKER_SPAWN_EGG,
    ITEM_FOX_SPAWN_EGG,
    ITEM_GHAST_SPAWN_EGG,
    ITEM_GLOW_SQUID_SPAWN_EGG,
    ITEM_GOAT_SPAWN_EGG,
    ITEM_GUARDIAN_SPAWN_EGG,
    ITEM_HOGLIN_SPAWN_EGG,
    ITEM_HORSE_SPAWN_EGG,
    ITEM_HUSK_SPAWN_EGG,
    ITEM_LLAMA_SPAWN_EGG,
    ITEM_MAGMA_CUBE_SPAWN_EGG,
    ITEM_MOOSHROOM_SPAWN_EGG,
    ITEM_MULE_SPAWN_EGG,
    ITEM_OCELOT_SPAWN_EGG,
    ITEM_PANDA_SPAWN_EGG,
    ITEM_PARROT_SPAWN_EGG,
    ITEM_PHANTOM_SPAWN_EGG,
    ITEM_PIG_SPAWN_EGG,
    ITEM_PIGLIN_SPAWN_EGG,
    ITEM_PIGLIN_BRUTE_SPAWN_EGG,
    ITEM_PILLAGER_SPAWN_EGG,
    ITEM_POLAR_BEAR_SPAWN_EGG,
    ITEM_PUFFERFISH_SPAWN_EGG,
    ITEM_RABBIT_SPAWN_EGG,
    ITEM_RAVAGER_SPAWN_EGG,
    ITEM_SALMON_SPAWN_EGG,
    ITEM_SHEEP_SPAWN_EGG,
    ITEM_SHULKER_SPAWN_EGG,
    ITEM_SILVERFISH_SPAWN_EGG,
    ITEM_SKELETON_SPAWN_EGG,
    ITEM_SKELETON_HORSE_SPAWN_EGG,
    ITEM_SLIME_SPAWN_EGG,
    ITEM_SPIDER_SPAWN_EGG,
    ITEM_SQUID_SPAWN_EGG,
    ITEM_STRAY_SPAWN_EGG,
    ITEM_STRIDER_SPAWN_EGG,
    ITEM_TRADER_LLAMA_SPAWN_EGG,
    ITEM_TROPICAL_FISH_SPAWN_EGG,
    ITEM_TURTLE_SPAWN_EGG,
    ITEM_VEX_SPAWN_EGG,
    ITEM_VILLAGER_SPAWN_EGG,
    ITEM_VINDICATOR_SPAWN_EGG,
    ITEM_WANDERING_TRADER_SPAWN_EGG,
    ITEM_WITCH_SPAWN_EGG,
    ITEM_WITHER_SKELETON_SPAWN_EGG,
    ITEM_WOLF_SPAWN_EGG,
    ITEM_ZOGLIN_SPAWN_EGG,
    ITEM_ZOMBIE_SPAWN_EGG,
    ITEM_ZOMBIE_HORSE_SPAWN_EGG,
    ITEM_ZOMBIE_VILLAGER_SPAWN_EGG,
    ITEM_ZOMBIFIED_PIGLIN_SPAWN_EGG,
    ITEM_EXPERIENCE_BOTTLE,
    ITEM_FIRE_CHARGE,
    ITEM_WRITABLE_BOOK,
    ITEM_WRITTEN_BOOK,
    ITEM_ITEM_FRAME,
    ITEM_GLOW_ITEM_FRAME,
    ITEM_FLOWER_POT,
    ITEM_CARROT,
    ITEM_POTATO,
    ITEM_BAKED_POTATO,
    ITEM_POISONOUS_POTATO,
    ITEM_MAP,
    ITEM_GOLDEN_CARROT,
    ITEM_SKELETON_SKULL,
    ITEM_WITHER_SKELETON_SKULL,
    ITEM_PLAYER_HEAD,
    ITEM_ZOMBIE_HEAD,
    ITEM_CREEPER_HEAD,
    ITEM_DRAGON_HEAD,
    ITEM_NETHER_STAR,
    ITEM_PUMPKIN_PIE,
    ITEM_FIREWORK_ROCKET,
    ITEM_FIREWORK_STAR,
    ITEM_ENCHANTED_BOOK,
    ITEM_NETHER_BRICK,
    ITEM_PRISMARINE_SHARD,
    ITEM_PRISMARINE_CRYSTALS,
    ITEM_RABBIT,
    ITEM_COOKED_RABBIT,
    ITEM_RABBIT_STEW,
    ITEM_RABBIT_FOOT,
    ITEM_RABBIT_HIDE,
    ITEM_ARMOR_STAND,
    ITEM_IRON_HORSE_ARMOR,
    ITEM_GOLDEN_HORSE_ARMOR,
    ITEM_DIAMOND_HORSE_ARMOR,
    ITEM_LEATHER_HORSE_ARMOR,
    ITEM_LEAD,
    ITEM_NAME_TAG,
    ITEM_COMMAND_BLOCK_MINECART,
    ITEM_MUTTON,
    ITEM_COOKED_MUTTON,
    ITEM_WHITE_BANNER,
    ITEM_ORANGE_BANNER,
    ITEM_MAGENTA_BANNER,
    ITEM_LIGHT_BLUE_BANNER,
    ITEM_YELLOW_BANNER,
    ITEM_LIME_BANNER,
    ITEM_PINK_BANNER,
    ITEM_GRAY_BANNER,
    ITEM_LIGHT_GRAY_BANNER,
    ITEM_CYAN_BANNER,
    ITEM_PURPLE_BANNER,
    ITEM_BLUE_BANNER,
    ITEM_BROWN_BANNER,
    ITEM_GREEN_BANNER,
    ITEM_RED_BANNER,
    ITEM_BLACK_BANNER,
    ITEM_END_CRYSTAL,
    ITEM_CHORUS_FRUIT,
    ITEM_POPPED_CHORUS_FRUIT,
    ITEM_BEETROOT,
    ITEM_BEETROOT_SEEDS,
    ITEM_BEETROOT_SOUP,
    ITEM_DRAGON_BREATH,
    ITEM_SPLASH_POTION,
    ITEM_SPECTRAL_ARROW,
    ITEM_TIPPED_ARROW,
    ITEM_LINGERING_POTION,
    ITEM_SHIELD,
    ITEM_TOTEM_OF_UNDYING,
    ITEM_SHULKER_SHELL,
    ITEM_IRON_NUGGET,
    ITEM_KNOWLEDGE_BOOK,
    ITEM_DEBUG_STICK,
    ITEM_MUSIC_DISC_13,
    ITEM_MUSIC_DISC_CAT,
    ITEM_MUSIC_DISC_BLOCKS,
    ITEM_MUSIC_DISC_CHIRP,
    ITEM_MUSIC_DISC_FAR,
    ITEM_MUSIC_DISC_MALL,
    ITEM_MUSIC_DISC_MELLOHI,
    ITEM_MUSIC_DISC_STAL,
    ITEM_MUSIC_DISC_STRAD,
    ITEM_MUSIC_DISC_WARD,
    ITEM_MUSIC_DISC_11,
    ITEM_MUSIC_DISC_WAIT,
    ITEM_MUSIC_DISC_PIGSTEP,
    ITEM_TRIDENT,
    ITEM_PHANTOM_MEMBRANE,
    ITEM_NAUTILUS_SHELL,
    ITEM_HEART_OF_THE_SEA,
    ITEM_CROSSBOW,
    ITEM_SUSPICIOUS_STEW,
    ITEM_LOOM,
    ITEM_FLOWER_BANNER_PATTERN,
    ITEM_CREEPER_BANNER_PATTERN,
    ITEM_SKULL_BANNER_PATTERN,
    ITEM_MOJANG_BANNER_PATTERN,
    ITEM_GLOBE_BANNER_PATTERN,
    ITEM_PIGLIN_BANNER_PATTERN,
    ITEM_COMPOSTER,
    ITEM_BARREL,
    ITEM_SMOKER,
    ITEM_BLAST_FURNACE,
    ITEM_CARTOGRAPHY_TABLE,
    ITEM_FLETCHING_TABLE,
    ITEM_GRINDSTONE,
    ITEM_SMITHING_TABLE,
    ITEM_STONECUTTER,
    ITEM_BELL,
    ITEM_LANTERN,
    ITEM_SOUL_LANTERN,
    ITEM_SWEET_BERRIES,
    ITEM_GLOW_BERRIES,
    ITEM_CAMPFIRE,
    ITEM_SOUL_CAMPFIRE,
    ITEM_SHROOMLIGHT,
    ITEM_HONEYCOMB,
    ITEM_BEE_NEST,
    ITEM_BEEHIVE,
    ITEM_HONEY_BOTTLE,
    ITEM_HONEYCOMB_BLOCK,
    ITEM_LODESTONE,
    ITEM_CRYING_OBSIDIAN,
    ITEM_BLACKSTONE,
    ITEM_BLACKSTONE_SLAB,
    ITEM_BLACKSTONE_STAIRS,
    ITEM_GILDED_BLACKSTONE,
    ITEM_POLISHED_BLACKSTONE,
    ITEM_POLISHED_BLACKSTONE_SLAB,
    ITEM_POLISHED_BLACKSTONE_STAIRS,
    ITEM_CHISELED_POLISHED_BLACKSTONE,
    ITEM_POLISHED_BLACKSTONE_BRICKS,
    ITEM_POLISHED_BLACKSTONE_BRICK_SLAB,
    ITEM_POLISHED_BLACKSTONE_BRICK_STAIRS,
    ITEM_CRACKED_POLISHED_BLACKSTONE_BRICKS,
    ITEM_RESPAWN_ANCHOR,
    ITEM_CANDLE,
    ITEM_WHITE_CANDLE,
    ITEM_ORANGE_CANDLE,
    ITEM_MAGENTA_CANDLE,
    ITEM_LIGHT_BLUE_CANDLE,
    ITEM_YELLOW_CANDLE,
    ITEM_LIME_CANDLE,
    ITEM_PINK_CANDLE,
    ITEM_GRAY_CANDLE,
    ITEM_LIGHT_GRAY_CANDLE,
    ITEM_CYAN_CANDLE,
    ITEM_PURPLE_CANDLE,
    ITEM_BLUE_CANDLE,
    ITEM_BROWN_CANDLE,
    ITEM_GREEN_CANDLE,
    ITEM_RED_CANDLE,
    ITEM_BLACK_CANDLE,
    ITEM_SMALL_AMETHYST_BUD,
    ITEM_MEDIUM_AMETHYST_BUD,
    ITEM_LARGE_AMETHYST_BUD,
    ITEM_AMETHYST_CLUSTER,
    ITEM_POINTED_DRIPSTONE,
    ITEM_TYPE_COUNT,
};

// @TODO(traks) is_empty function
typedef struct {
    // @NOTE(traks) zero size if and only if type is AIR, because that seems
    // what may be expected
    i32 type;
    u8 size;
} item_stack;

// @TODO(traks) the names are not completely accurate, should improve names once
// we figure out all the actual vanilla uses and start using them ourselves
enum level_event_type {
    LEVEL_EVENT_SOUND_DISPENSER_DISPENSE = 1000,
    LEVEL_EVENT_SOUND_DISPENSER_FAIL,
    LEVEL_EVENT_SOUND_DISPENSER_PROJECTILE_LAUNCH,
    LEVEL_EVENT_SOUND_ENDER_EYE_LAUNCH,
    LEVEL_EVENT_SOUND_FIREWORK_SHOOT,
    LEVEL_EVENT_SOUND_OPEN_IRON_DOOR,
    LEVEL_EVENT_SOUND_OPEN_WOODEN_DOOR,
    LEVEL_EVENT_SOUND_OPEN_WOODEN_TRAP_DOOR,
    LEVEL_EVENT_SOUND_OPEN_FENCE_GATE,
    LEVEL_EVENT_SOUND_EXTINGUISH_FIRE,
    LEVEL_EVENT_SOUND_PLAY_RECORDING,
    LEVEL_EVENT_SOUND_CLOSE_IRON_DOOR,
    LEVEL_EVENT_SOUND_CLOSE_WOODEN_DOOR,
    LEVEL_EVENT_SOUND_CLOSE_WOODEN_TRAP_DOOR,
    LEVEL_EVENT_SOUND_CLOSE_FENCE_GATE,
    LEVEL_EVENT_SOUND_GHAST_WARNING,
    LEVEL_EVENT_SOUND_GHAST_FIREBALL,
    LEVEL_EVENT_SOUND_DRAGON_FIREBALL,
    LEVEL_EVENT_SOUND_BLAZE_FIREBALL,
    LEVEL_EVENT_SOUND_ZOMBIE_WOODEN_DOOR,
    LEVEL_EVENT_SOUND_ZOMBIE_IRON_DOOR,
    LEVEL_EVENT_SOUND_ZOMBIE_DOOR_CRASH,
    LEVEL_EVENT_SOUND_WITHER_BLOCK_BREAK,
    LEVEL_EVENT_SOUND_WITHER_BOSS_SPAWN,
    LEVEL_EVENT_SOUND_WITHER_BOSS_SHOOT,
    LEVEL_EVENT_SOUND_BAT_LIFTOFF,
    LEVEL_EVENT_SOUND_ZOMBIE_INFECTED,
    LEVEL_EVENT_SOUND_ZOMBIE_CONVERTED,
    LEVEL_EVENT_SOUND_DRAGON_DEATH,
    LEVEL_EVENT_SOUND_ANVIL_BROKEN,
    LEVEL_EVENT_SOUND_ANVIL_USED,
    LEVEL_EVENT_SOUND_ANVIL_LAND,
    LEVEL_EVENT_SOUND_PORTAL_TRAVEL,
    LEVEL_EVENT_SOUND_CHORUS_GROW,
    LEVEL_EVENT_SOUND_CHORUS_DEATH,
    LEVEL_EVENT_SOUND_BREWING_STAND_BREW,
    LEVEL_EVENT_SOUND_CLOSE_IRON_TRAP_DOOR,
    LEVEL_EVENT_SOUND_OPEN_IRON_TRAP_DOOR,
    LEVEL_EVENT_SOUND_END_PORTAL_SPAWN,
    LEVEL_EVENT_SOUND_PHANTOM_BITE,
    LEVEL_EVENT_SOUND_ZOMBIE_TO_DROWNED,
    LEVEL_EVENT_SOUND_HUSK_TO_ZOMBIE,
    LEVEL_EVENT_SOUND_GRINDSTONE_USED,
    LEVEL_EVENT_SOUND_PAGE_TURN,
    LEVEL_EVENT_SOUND_SMITHING_TABLE_USED,
    LEVEL_EVENT_SOUND_POINTED_DRIPSTONE_LAND,
    LEVEL_EVENT_SOUND_DRIP_LAVA_INTO_CAULDRON,
    LEVEL_EVENT_SOUND_DRIP_WATER_INTO_CAULDRON,
    LEVEL_EVENT_SOUND_SKELETON_TO_STRAY,

    LEVEL_EVENT_COMPOSTER_FILL = 1500,
    LEVEL_EVENT_LAVA_FIZZ,
    LEVEL_EVENT_REDSTONE_TORCH_BURNOUT,
    LEVEL_EVENT_END_PORTAL_FRAME_FILL,
    LEVEL_EVENT_DRIPSTONE_DRIP,
    LEVEL_EVENT_PARTICLES_AND_SOUND_PLANT_GROWTH,

    LEVEL_EVENT_PARTICLES_SHOOT = 2000,
    LEVEL_EVENT_PARTICLES_DESTROY_BLOCK,
    LEVEL_EVENT_PARTICLES_SPELL_POTION_SPLASH,
    LEVEL_EVENT_PARTICLES_EYE_OF_ENDER_DEATH,
    LEVEL_EVENT_PARTICLES_MOBBLOCK_SPAWN,
    LEVEL_EVENT_PARTICLES_PLANT_GROWTH,
    LEVEL_EVENT_PARTICLES_DRAGON_FIREBALL_SPLASH,
    LEVEL_EVENT_PARTICLES_INSTANT_POTION_SPLASH,
    LEVEL_EVENT_PARTICLES_DRAGON_BLOCK_BREAK,
    LEVEL_EVENT_PARTICLES_WATER_EVAPORATING,

    LEVEL_EVENT_ANIMATION_END_GATEWAY_SPAWN = 3000,
    LEVEL_EVENT_ANIMATION_DRAGON_SUMMON_ROAR,
    LEVEL_EVENT_PARTICLES_ELECTRIC_SPARK,
    LEVEL_EVENT_PARTICLES_AND_SOUND_WAX_ON,
    LEVEL_EVENT_PARTICLES_WAX_OFF,
    LEVEL_EVENT_PARTICLES_SCRAPE,
};

// in network id order
enum entity_type {
    ENTITY_AREA_EFFECT_CLOUD,
    ENTITY_ARMOR_STAND,
    ENTITY_ARROW,
    ENTITY_AXOLOTL,
    ENTITY_BAT,
    ENTITY_BEE,
    ENTITY_BLAZE,
    ENTITY_BOAT,
    ENTITY_CAT,
    ENTITY_CAVE_SPIDER,
    ENTITY_CHICKEN,
    ENTITY_COD,
    ENTITY_COW,
    ENTITY_CREEPER,
    ENTITY_DOLPHIN,
    ENTITY_DONKEY,
    ENTITY_DRAGON_FIREBALL,
    ENTITY_DROWNED,
    ENTITY_ELDER_GUARDIAN,
    ENTITY_END_CRYSTAL,
    ENTITY_ENDER_DRAGON,
    ENTITY_ENDERMAN,
    ENTITY_ENDERMITE,
    ENTITY_EVOKER,
    ENTITY_EVOKER_FANGS,
    ENTITY_EXPERIENCE_ORB,
    ENTITY_EYE_OF_ENDER,
    ENTITY_FALLING_BLOCK,
    ENTITY_FIREWORK_ROCKET,
    ENTITY_FOX,
    ENTITY_GHAST,
    ENTITY_GIANT,
    ENTITY_GLOW_ITEM_FRAME,
    ENTITY_GLOW_SQUID,
    ENTITY_GOAT,
    ENTITY_GUARDIAN,
    ENTITY_HOGLIN,
    ENTITY_HORSE,
    ENTITY_HUSK,
    ENTITY_ILLUSIONER,
    ENTITY_IRON_GOLEM,
    ENTITY_ITEM,
    ENTITY_ITEM_FRAME,
    ENTITY_FIREBALL,
    ENTITY_LEASH_KNOT,
    ENTITY_LIGHTNING_BOLT,
    ENTITY_LLAMA,
    ENTITY_LLAMA_SPIT,
    ENTITY_MAGMA_CUBE,
    ENTITY_MARKER,
    ENTITY_MINECART,
    ENTITY_CHEST_MINECART,
    ENTITY_COMMAND_BLOCK_MINECART,
    ENTITY_FURNACE_MINECART,
    ENTITY_HOPPER_MINECART,
    ENTITY_SPAWNER_MINECART,
    ENTITY_TNT_MINECART,
    ENTITY_MULE,
    ENTITY_MOOSHROOM,
    ENTITY_OCELOT,
    ENTITY_PAINTING,
    ENTITY_PANDA,
    ENTITY_PARROT,
    ENTITY_PHANTOM,
    ENTITY_PIG,
    ENTITY_PIGLIN,
    ENTITY_PIGLIN_BRUTE,
    ENTITY_PILLAGER,
    ENTITY_POLAR_BEAR,
    ENTITY_TNT,
    ENTITY_PUFFERFISH,
    ENTITY_RABBIT,
    ENTITY_RAVAGER,
    ENTITY_SALMON,
    ENTITY_SHEEP,
    ENTITY_SHULKER,
    ENTITY_SHULKER_BULLET,
    ENTITY_SILVERFISH,
    ENTITY_SKELETON,
    ENTITY_SKELETON_HORSE,
    ENTITY_SLIME,
    ENTITY_SMALL_FIREBALL,
    ENTITY_SNOW_GOLEM,
    ENTITY_SNOWBALL,
    ENTITY_SPECTRAL_ARROW,
    ENTITY_SPIDER,
    ENTITY_SQUID,
    ENTITY_STRAY,
    ENTITY_STRIDER,
    ENTITY_EGG,
    ENTITY_ENDER_PEARL,
    ENTITY_EXPERIENCE_BOTTLE,
    ENTITY_POTION,
    ENTITY_TRIDENT,
    ENTITY_TRADER_LLAMA,
    ENTITY_TROPICAL_FISH,
    ENTITY_TURTLE,
    ENTITY_VEX,
    ENTITY_VILLAGER,
    ENTITY_VINDICATOR,
    ENTITY_WANDERING_TRADER,
    ENTITY_WITCH,
    ENTITY_WITHER,
    ENTITY_WITHER_SKELETON,
    ENTITY_WITHER_SKULL,
    ENTITY_WOLF,
    ENTITY_ZOGLIN,
    ENTITY_ZOMBIE,
    ENTITY_ZOMBIE_HORSE,
    ENTITY_ZOMBIE_VILLAGER,
    ENTITY_ZOMBIFIED_PIGLIN,
    ENTITY_PLAYER,
    ENTITY_FISHING_BOBBER,
    ENTITY_NULL, // not used in vanilla
    ENTITY_TYPE_COUNT,
};

#define ENTITY_INDEX_MASK (MAX_ENTITIES - 1)

// Top 12 bits are used for the generation, lowest 20 bits can be used for the
// index into the entity table. Bits actually used for the index depends on
// MAX_ENTITIES.
static_assert(MAX_ENTITIES <= (1UL << 20), "MAX_ENTITIES too large");
typedef u32 entity_id;

// in network order
enum entity_pose {
    ENTITY_POSE_STANDING,
    ENTITY_POSE_FALL_FLYING,
    ENTITY_POSE_SLEEPING,
    ENTITY_POSE_SWIMMING,
    ENTITY_POSE_SPIN_ATTACK,
    ENTITY_POSE_SHIFTING,
    ENTITY_POSE_LONG_JUMPING,
    ENTITY_POSE_DYING,
};

enum packet_game_event_type {
    PACKET_GAME_EVENT_NO_RESPAWN_BLOCK_AVAILABLE,
    PACKET_GAME_EVENT_START_RAINING,
    PACKET_GAME_EVENT_STOP_RAINING,
    PACKET_GAME_EVENT_CHANGE_GAMEMODE,
    PACKET_GAME_EVENT_WIN_GAME,
    PACKET_GAME_EVENT_DEMO_EVENT,
    PACKET_GAME_EVENT_ARROW_HIT_PLAYER,
    PACKET_GAME_EVENT_RAIN_LEVEL_CHANGE,
    PACKET_GAME_EVENT_THUNDER_LEVEL_CHANGE,
    PACKET_GAME_EVENT_PUFFER_FISH_STING,
    PACKET_GAME_EVENT_GUARDIAN_ELDER_EFFECT,
    PACKET_GAME_EVENT_IMMEDIATE_RESPAWN,
};

enum entity_data_type {
    ENTITY_DATA_TYPE_BYTE,
    ENTITY_DATA_TYPE_INT,
    ENTITY_DATA_TYPE_FLOAT,
    ENTITY_DATA_TYPE_STRING,
    ENTITY_DATA_TYPE_COMPONENT,
    ENTITY_DATA_TYPE_OPTIONAL_COMPONENT,
    ENTITY_DATA_TYPE_ITEM_STACK,
    ENTITY_DATA_TYPE_BOOL,
    ENTITY_DATA_TYPE_ROTATIONS,
    ENTITY_DATA_TYPE_BLOCK_POS,
    ENTITY_DATA_TYPE_OPTIONAL_BLOCK_POS,
    ENTITY_DATA_TYPE_DIRECTION,
    ENTITY_DATA_TYPE_OPTIONAL_UUID,
    ENTITY_DATA_TYPE_BLOCK_STATE,
    ENTITY_DATA_TYPE_NBT,
    ENTITY_DATA_TYPE_PARTICLE,
    ENTITY_DATA_TYPE_VILLAGER_DATA,
    ENTITY_DATA_TYPE_OPTIONAL_UINT,
    ENTITY_DATA_TYPE_POSE,
};

enum entity_data {
    ENTITY_DATA_FLAGS,
    ENTITY_DATA_AIR_SUPPLY,
    ENTITY_DATA_CUSTOM_NAME,
    ENTITY_DATA_CUSTOM_NAME_VISIBLE,
    ENTITY_DATA_SILENT,
    ENTITY_DATA_NO_GRAVITY,
    ENTITY_DATA_POSE,
    ENTITY_DATA_FROZEN_TICKS,
    ENTITY_DATA_BASE_NEXT,

    // living entity data
    ENTITY_DATA_LIVING_FLAGS = ENTITY_DATA_BASE_NEXT,
    ENTITY_DATA_HEALTH,
    ENTITY_DATA_EFFECT_COLOUR,
    ENTITY_DATA_EFFECT_AMBIENCE,
    ENTITY_DATA_ARROW_COUNT,
    ENTITY_DATA_BEE_STINGER_COUNT,
    ENTITY_DATA_SLEEPING_POS,
    ENTITY_DATA_LIVING_NEXT,

    // item entity data
    ENTITY_DATA_ITEM = ENTITY_DATA_BASE_NEXT,

    // player data
    ENTITY_DATA_ABSORPTION = ENTITY_DATA_LIVING_NEXT,
    ENTITY_DATA_SCORE,
    ENTITY_DATA_MODEL_CUSTOMISATION,
    ENTITY_DATA_MAIN_HAND,
    ENTITY_DATA_LEFT_SHOULDER_ENTITY,
    ENTITY_DATA_RIGHT_SHOULDER_ENTITY,
};

// in network order
enum game_event {
    GAME_EVENT_BLOCK_ATTACH,
    GAME_EVENT_BLOCK_CHANGE,
    GAME_EVENT_BLOCK_CLOSE,
    GAME_EVENT_BLOCK_DESTROY,
    GAME_EVENT_BLOCK_DETACH,
    GAME_EVENT_BLOCK_OPEN,
    GAME_EVENT_BLOCK_PLACE,
    GAME_EVENT_BLOCK_PRESS,
    GAME_EVENT_BLOCK_SWITCH,
    GAME_EVENT_BLOCK_UNPRESS,
    GAME_EVENT_BLOCK_UNSWITCH,
    GAME_EVENT_CONTAINER_CLOSE,
    GAME_EVENT_CONTAINER_OPEN,
    GAME_EVENT_DISPENSE_FAIL,
    GAME_EVENT_DRINKING_FINISH,
    GAME_EVENT_EAT,
    GAME_EVENT_ELYTRA_FREE_FALL,
    GAME_EVENT_ENTITY_DAMAGED,
    GAME_EVENT_ENTITY_KILLED,
    GAME_EVENT_ENTITY_PLACE,
    GAME_EVENT_EQUIP,
    GAME_EVENT_EXPLODE,
    GAME_EVENT_FISHING_ROD_CAST,
    GAME_EVENT_FISHING_ROD_REEL_IN,
    GAME_EVENT_FLAP,
    GAME_EVENT_FLUID_PICKUP,
    GAME_EVENT_FLUID_PLACE,
    GAME_EVENT_HIT_GROUND,
    GAME_EVENT_MOB_INTERACT,
    GAME_EVENT_LIGHTNING_STRIKE,
    GAME_EVENT_MINECART_MOVING,
    GAME_EVENT_PISTON_CONTRACT,
    GAME_EVENT_PISTON_EXTEND,
    GAME_EVENT_PRIME_FUSE,
    GAME_EVENT_PROJECTILE_LAND,
    GAME_EVENT_PROJECTILE_SHOOT,
    GAME_EVENT_RAVAGER_ROAR,
    GAME_EVENT_RING_BELL,
    GAME_EVENT_SHEAR,
    GAME_EVENT_SHULKER_CLOSE,
    GAME_EVENT_SHULKER_OPEN,
    GAME_EVENT_SPLASH,
    GAME_EVENT_STEP,
    GAME_EVENT_SWIM,
    GAME_EVENT_WOLF_SHAKING,
    GAME_EVENT_TYPE_COUNT,
};

// @TODO(traks) Should we really be storing crafting grid + result slot on the
// player? The vanilla MC server considers the inventory menu always 'open'
// unless some other menu is explicitly opened. The client also doesn't send an
// 'inventory open' packet if the client opens their inventory.
//
// Perhaps we should model inventory and crafting grid + result slot separately
// into a menu as well. Would make more sense when a player has another menu
// open. There are also some issues with syncing inventory menu changes to the
// client if they have another menu open.
//
// For menus we should also model the cursor item as a slot, so you can just
// loop over all slots to check whether a menu contains an item.
//
// If no menu is explicitly opened, the default open menu would just be the
// inventory menu.

// Player inventory menu slots are indexed as follows:
//
//  0           the crafting grid result slot
//  1-4         the 2x2 crafting grid slots
//  5-8         the 4 armour slots
//  9-35        the 36 main inventory slots
//  36-44       hotbar slots
//  45          off hand slot
//
// Here are some defines for convenience.
#define PLAYER_SLOTS (46)
#define PLAYER_FIRST_MAIN_INV_SLOT (9)
#define PLAYER_LAST_MAIN_INV_SLOT (35)
#define PLAYER_FIRST_HOTBAR_SLOT (36)
#define PLAYER_LAST_HOTBAR_SLOT (44)
#define PLAYER_OFF_HAND_SLOT (45)

typedef struct {
    unsigned char sent;
} chunk_cache_entry;

typedef struct {
    entity_id eid;

    i64 last_tp_packet_tick;
    i64 last_send_pos_tick;
    i64 last_update_tick;

    unsigned char update_interval;

    double last_sent_x;
    double last_sent_y;
    double last_sent_z;

    // these are always 0 for some entities
    unsigned char last_sent_rot_x;
    unsigned char last_sent_rot_y;
    unsigned char last_sent_head_rot_y;
} tracked_entity;

typedef struct {
    BlockPos pos;
    u16 new_state;
    unsigned char action;
    unsigned char success;
} block_break_ack;

typedef struct {
    unsigned char username[16];
    int username_size;

    item_stack slots_prev_tick[PLAYER_SLOTS];
    item_stack slots[PLAYER_SLOTS];
    static_assert(PLAYER_SLOTS <= 64, "Too many player slots");
    u64 slots_needing_update;
    unsigned char selected_slot;

    entity_id picked_up_item_id;
    u8 picked_up_item_size;
    i64 picked_up_tick;

    unsigned char gamemode;

    // @NOTE(traks) the server doesn't tell clients the body rotation of
    // players. The client determines the body rotation based on the player's
    // movement and their head rotation. However, we do need to send a players
    // head rotation using the designated packet, otherwise heads won't rotate.

    int sock;
    unsigned char * rec_buf;
    int rec_buf_size;
    int rec_cursor;

    unsigned char * send_buf;
    int send_buf_size;
    int send_cursor;

    // The radius of the client's view distance, excluding the centre chunk,
    // and including an extra outer rim the client doesn't render but uses
    // for connected blocks and such.
    int chunk_cache_radius;
    i16 chunk_cache_centre_x;
    i16 chunk_cache_centre_z;
    int new_chunk_cache_radius;
    // @TODO(traks) maybe this should just be a bitmap
    chunk_cache_entry chunk_cache[MAX_CHUNK_CACHE_DIAM * MAX_CHUNK_CACHE_DIAM];

    i32 current_teleport_id;

    unsigned char language[16];
    int language_size;
    i32 chat_visibility;
    u8 sees_chat_colours;
    u8 model_customisation;
    i32 main_hand;
    u8 text_filtering;

    i64 last_keep_alive_sent_tick;

    entity_id eid;

    // @TODO(traks) this feels a bit silly, but very simple
    tracked_entity tracked_entities[MAX_ENTITIES];

    BlockPos changed_blocks[8];
    u8 changed_block_count;

    // @TODO(traks) figure out the maximum number of blocks broken per tick by
    // a single player
    block_break_ack block_break_acks[8];
    unsigned char block_break_ack_count;
} entity_player;

typedef struct {
    // entity data
    item_stack contents;
    // minecraft calls this pickup delay. If equal to 32767, this item can't
    // ever be picked up (by players, foxes, etc.)
    i16 pickup_timeout;
} entity_item;

#define ENTITY_IN_USE ((unsigned) (1 << 0))
#define ENTITY_TELEPORTING ((unsigned) (1 << 1))
#define ENTITY_ON_GROUND ((unsigned) (1 << 2))
#define ENTITY_CUSTOM_NAME_VISIBLE ((unsigned) (1 << 3))
#define ENTITY_NO_GRAVITY ((unsigned) (1 << 4))
#define ENTITY_SILENT ((unsigned) (1 << 5))
#define ENTITY_GLOWING ((unsigned) (1 << 6))
#define ENTITY_INVISIBLE ((unsigned) (1 << 7))
#define ENTITY_INVULNERABLE ((unsigned) (1 << 8))
#define ENTITY_VISUAL_FIRE ((unsigned) (1 << 9))
#define ENTITY_SHIFTING ((unsigned) (1 << 10))
#define ENTITY_SPRINTING ((unsigned) (1 << 11))
#define ENTITY_SWIMMING ((unsigned) (1 << 12))

// living entities only
#define ENTITY_FALL_FLYING ((unsigned) (1 << 13))

#define LIVING_EFFECT_AMBIENCE ((unsigned) (1 << 14))

#define PLAYER_DID_INIT_PACKETS ((unsigned) (1 << 16))
#define PLAYER_SENT_TELEPORT ((unsigned) (1 << 17))
#define PLAYER_GOT_ALIVE_RESPONSE ((unsigned) (1 << 18))
#define PLAYER_INITIALISED_TAB_LIST ((unsigned) (1 << 19))
#define PLAYER_PACKET_COMPRESSION ((unsigned) (1 << 20))
#define PLAYER_SPIN_ATTACKING ((unsigned) (1 << 21))
#define PLAYER_FLYING ((unsigned) (1 << 22))
#define PLAYER_CAN_FLY ((unsigned) (1 << 23))
#define PLAYER_INSTABUILD ((unsigned) (1 << 24))
#define PLAYER_CAN_BUILD ((unsigned) (1 << 25))

#define PLAYER_ABILITIES_CHANGED ((u64) (1ULL << 32))
#define PLAYER_GAMEMODE_CHANGED ((u64) (1ULL << 33))

typedef struct {
    entity_id eid;
    unsigned type;

    // centre of bottom of entity's bounding box
    double x;
    double y;
    double z;

    // for players the head rotation
    // not used for items

    // @NOTE(traks) these values shouldn't exceed the range [0, 360] by too
    // much, otherwise float -> integer conversion errors may occur.
    float rot_x;
    float rot_y;

    // velocity, not used for players
    double vx;
    double vy;
    double vz;

    double collision_width;
    double collision_height;

    // Bottom 32 bits for changed entity data: bit position equals entity data
    // id. Top 32 bits for other things. This is used to send packets with the
    // most up-to-date data.
    u64 changed_data;

    // entity data
    unsigned flags;
    i32 air_supply;
    unsigned char pose;
    i32 effect_colour; // living entities

    union {
        entity_player player;
        entity_item item;
    };
} entity_base;

typedef struct {
    u16 size;
    unsigned char text[512];
} global_msg;

typedef struct {
    // index into string buffer for name size + value
    int name_index;
    int value_count;
    // index into value id buffer for array of values
    int values_index;
} tag_spec;

typedef struct {
    // resource location identifier of this tag list
    unsigned char name_size;
    unsigned char name[32];
    // number of tags
    int size;
    tag_spec tags[128];
} tag_list;

#define RESOURCE_LOC_MAX_SIZE (256)

typedef struct {
    unsigned char size;
    u16 id;
    u32 buf_index;
} resource_loc_entry;

typedef struct {
    i32 size_mask;
    i32 string_buf_size;
    resource_loc_entry * entries;
    unsigned char * string_buf;
    i32 last_string_buf_index;

    u16 * by_id;
    u16 max_ids;
} resource_loc_table;

// Currently dimension types have the following configurable properties that are
// shared with the client. These have the effects:
//
//  - fixed_time (optional long): time of day always equals this
//  - has_skylight (bool): sky light levels, whether it can
//    thunder, whether daylight sensors work, phantom spawning
//  - has_ceiling (bool): affects thunder, map rendering, mob
//    spawning algorithm, respawn logic
//  - ultrawarm (bool): whether water can be placed, affects ice
//    melting, and how far and how fast lava flows
//  - natural (bool): whether players can sleep and whether
//    zombified piglin can spawn from portals
//  - coordinate_scale (double): vanilla overworld has 1 and vanilla
//    nether has 8. affects teleporting between worlds
//  - piglin_safe (bool): false if piglins convert to zombified
//    piglins as in the vanilla overworld
//  - bed_works (bool): true if beds can set spawn point. else beds will
//    explode when used
//  - respawn_anchor_works (bool): true if respawn anchors can
//    set spawn point. else they explode when used
//  - has_raids (bool): whether raids spawn
//  - min_y (int in [-2016, 2047]): min block coordinate in the world
//  - height (int in [16, 4064]): height above min_y of the world. Restricted
//    by 12-bit y coordinate in compact block pos.
//  - logical_height (int in [0, 256]): seems to only affect
//    chorus fruit teleportation and nether portal spawning, not
//    the actual maximum world height
//  - infiniburn (resource loc): the resource location of a
//    block tag that is used to check whether fire should keep
//    burning forever on tagged blocks
//  - effects (resource loc): affects cloud height, fog, sky colour, etc. for
//    the client
//  - ambient_light (float): affects brightness visually and some mob AI

#define DIMENSION_HAS_SKYLIGHT ((unsigned) (0x1 << 0))

#define DIMENSION_HAS_CEILING ((unsigned) (0x1 << 1))

#define DIMENSION_ULTRAWARM ((unsigned) (0x1 << 2))

#define DIMENSION_NATURAL ((unsigned) (0x1 << 3))

#define DIMENSION_PIGLIN_SAFE ((unsigned) (0x1 << 4))

#define DIMENSION_BED_WORKS ((unsigned) (0x1 << 5))

#define DIMENSION_RESPAWN_ANCHOR_WORKS ((unsigned) (0x1 << 6))

#define DIMENSION_HAS_RAIDS ((unsigned) (0x1 << 7))

typedef struct {
    unsigned char name[64];
    unsigned char name_size;
    i64 fixed_time; // -1 if not used
    unsigned flags;
    double coordinate_scale;
    i32 min_y;
    i32 height;
    i32 logical_height;
    unsigned char infiniburn[128];
    unsigned char infiniburn_size;
    unsigned char effects[128];
    unsigned char effects_size;
    float ambient_light;
} dimension_type;

enum biome_precipitation {
    BIOME_PRECIPITATION_NONE,
    BIOME_PRECIPITATION_RAIN,
    BIOME_PRECIPITATION_SNOW,
};

enum biome_category {
    BIOME_CATEGORY_NONE,
    BIOME_CATEGORY_TAIGA,
    BIOME_CATEGORY_EXTREME_HILLS,
    BIOME_CATEGORY_JUNGLE,
    BIOME_CATEGORY_MESA,
    BIOME_CATEGORY_PLAINS,
    BIOME_CATEGORY_SAVANNA,
    BIOME_CATEGORY_ICY,
    BIOME_CATEGORY_THE_END,
    BIOME_CATEGORY_BEACH,
    BIOME_CATEGORY_FOREST,
    BIOME_CATEGORY_OCEAN,
    BIOME_CATEGORY_DESERT,
    BIOME_CATEGORY_RIVER,
    BIOME_CATEGORY_SWAMP,
    BIOME_CATEGORY_MUSHROOM,
    BIOME_CATEGORY_NETHER,
    BIOME_CATEGORY_UNDERGROUND,
};

enum biome_temperature_modifier {
    BIOME_TEMPERATURE_MOD_NONE,
    BIOME_TEMPERATURE_MOD_FROZEN,
};

enum biome_grass_colour_modifier {
    BIOME_GRASS_COLOUR_MOD_NONE,
    BIOME_GRASS_COLOUR_MOD_DARK_FOREST,
    BIOME_GRASS_COLOUR_MOD_SWAMP,
};

// @TODO(traks) description of all fields in the biome struct

typedef struct {
    unsigned char name[64];
    unsigned char name_size;
    unsigned char precipitation;
    unsigned char category;
    float temperature;
    float downfall;
    unsigned temperature_mod;
    float depth;
    float scale;

    i32 fog_colour;
    i32 water_colour;
    i32 water_fog_colour;
    i32 sky_colour;
    i32 foliage_colour_override; // -1 if not used
    i32 grass_colour_override; // -1 if not used
    unsigned char grass_colour_mod;

    // @TODO(traks) complex ambient particle settings

    unsigned char ambient_sound[64];
    unsigned char ambient_sound_size;

    unsigned char mood_sound[64];
    unsigned char mood_sound_size;
    i32 mood_sound_tick_delay;
    i32 mood_sound_block_search_extent;
    double mood_sound_offset;

    unsigned char additions_sound[64];
    unsigned char additions_sound_size;
    double additions_sound_tick_chance;

    unsigned char music_sound[64];
    unsigned char music_sound_size;
    i32 music_min_delay;
    i32 music_max_delay;
    u8 music_replace_current_music;
} biome;

typedef struct {
    BlockPos pos;
    int from_direction;
    i64 for_tick;
} scheduled_block_update;

typedef struct {
    BlockPos pos;
    unsigned char from_direction;
} block_update;

typedef struct {
    block_update * blocks_to_update;
    int update_count;
    int max_updates;
} block_update_context;

typedef struct {
    i64 current_tick;

    entity_base entities[MAX_ENTITIES];
    u16 next_entity_generations[MAX_ENTITIES];
    i32 entity_count;

    // All chunks that should be loaded. Stored in a request list to allow for
    // ordered loads. If a
    // @TODO(traks) appropriate size
    chunk_pos chunk_load_requests[64];
    int chunk_load_request_count;

    // global messages for the current tick
    global_msg global_msgs[16];
    int global_msg_count;

    void * short_lived_scratch;
    i32 short_lived_scratch_size;

    entity_id tab_list_added[64];
    int tab_list_added_count;
    entity_id tab_list_removed[64];
    int tab_list_removed_count;
    entity_id tab_list[MAX_PLAYERS];
    int tab_list_size;

    tag_list block_tags;
    tag_list entity_tags;
    tag_list fluid_tags;
    tag_list item_tags;
    tag_list game_event_tags;
    // total number of tag keys
    int tag_name_count;
    // total number of values
    int tag_value_id_count;
    // buffer for the tag keys in the tag lists
    unsigned char tag_name_buf[1 << 13];
    // buffer for the lists of values associated to the tag keys
    u16 tag_value_id_buf[1 << 12];

    resource_loc_table block_resource_table;
    resource_loc_table item_resource_table;
    resource_loc_table entity_resource_table;
    resource_loc_table fluid_resource_table;
    resource_loc_table game_event_resource_table;

    block_properties block_properties_table[ACTUAL_BLOCK_TYPE_COUNT];
    int vanilla_block_state_count;
    int actual_block_state_count;
    block_property_spec block_property_specs[BLOCK_PROPERTY_COUNT];
    block_model block_models[128];
    support_model support_models[128];
    u8 collision_model_by_state[18000];

    dimension_type dimension_types[32];
    int dimension_type_count;

    biome biomes[128];
    int biome_count;

    // block state -> block type
    u16 block_type_by_state[21000];

    // @TODO(traks) this is the simplest but dumbest thing. Should really store
    // this per chunk, since we need to save it when chunk is unloaded. Limit
    // should also be way higher.

    // @TODO(traks) remove scheduled block updates when a block changes or the
    // chunk gets unloaded? Not sure if it really matters if a block gets
    // updated 'unexpectedly'. What is the worst thing that could happen?
    scheduled_block_update scheduled_block_updates[100];
    int scheduled_block_update_count;
} server;

extern server * serv;

// in network order
enum player_hand {
    PLAYER_MAIN_HAND,
    PLAYER_OFF_HAND,
};

void
logs(void * format, ...);

void
logs_errno(void * format);

void *
alloc_in_arena(MemoryArena * arena, i32 size);

int
find_property_value_index(block_property_spec * prop_spec, String val);

chunk *
get_or_create_chunk(chunk_pos pos);

chunk *
get_chunk_if_loaded(chunk_pos pos);

chunk *
get_chunk_if_available(chunk_pos pos);

block_entity_base *
try_get_block_entity(BlockPos pos);

u16
try_get_block_state(BlockPos pos);

void
try_set_block_state(BlockPos pos, u16 block_state);

void
chunk_set_block_state(chunk * ch, int x, int y, int z, u16 block_state);

u16
chunk_get_block_state(chunk * ch, int x, int y, int z);

void
try_read_chunk_from_storage(chunk_pos pos, chunk * ch,
        MemoryArena * scratch_arena);

chunk_section *
alloc_chunk_section(void);

void
free_chunk_section(chunk_section * section);

void
clean_up_unused_chunks(void);

entity_base *
resolve_entity(entity_id eid);

entity_base *
try_reserve_entity(unsigned type);

void
evict_entity(entity_id eid);

void
teleport_player(entity_base * entity,
        double new_x, double new_y, double new_z,
        float new_rot_x, float new_rot_y);

void
set_player_gamemode(entity_base * player, int new_gamemode);

void
add_stack_to_player_inventory(entity_base * player, item_stack * to_add);

void
tick_player(entity_base * entity, MemoryArena * tick_arena);

void
send_packets_to_player(entity_base * entity, MemoryArena * tick_arena);

void
register_resource_loc(String resource_loc, i16 id,
        resource_loc_table * table);

i16
resolve_resource_loc_id(String resource_loc, resource_loc_table * table);

String
get_resource_loc(u16 id, resource_loc_table * table);

int
net_string_equal(String a, String b);

void
process_use_item_on_packet(entity_base * player,
        i32 hand, BlockPos clicked_pos, i32 clicked_face,
        float click_offset_x, float click_offset_y, float click_offset_z,
        u8 is_inside, MemoryArena * scratch_arena);

int
use_block(entity_base * player,
        i32 hand, BlockPos clicked_pos, i32 clicked_face,
        float click_offset_x, float click_offset_y, float click_offset_z,
        u8 is_inside, block_update_context * buc);

u8
get_max_stack_size(i32 item_type);

void
propagate_delayed_block_updates(MemoryArena * scratch_arena);

void
propagate_block_updates(block_update_context * buc);

BlockPos
get_relative_block_pos(BlockPos pos, int face);

int
can_plant_survive_on(i32 type_below);

int
can_lily_pad_survive_on(u16 state_below);

int
can_carpet_survive_on(i32 type_below);

int
can_dead_bush_survive_on(i32 type_below);

int
can_wither_rose_survive_on(i32 type_below);

int
can_azalea_survive_on(i32 type_below);

int
can_nether_plant_survive_on(i32 type_below);

int
is_bamboo_plantable_on(i32 type_below);

int
can_sea_pickle_survive_on(u16 state_below);

int
can_snow_survive_on(u16 state_below);

int
can_pressure_plate_survive_on(u16 state_below);

int
can_redstone_wire_survive_on(u16 state_below);

int
update_redstone_wire(BlockPos pos, u16 in_world_state,
        block_state_info * base_info, block_update_context * buc);

int
can_sugar_cane_survive_at(BlockPos cur_pos);

int
get_opposite_direction(int direction);

int
get_direction_axis(int direction);

void
init_block_data(void);

void
init_item_data(void);

int
has_block_state_property(block_state_info * info, int prop);

block_state_info
describe_block_state(u16 block_state);

u16
get_default_block_state(i32 block_type);

block_state_info
describe_default_block_state(i32 block_type);

u16
make_block_state(block_state_info * info);

void
update_stairs_shape(BlockPos pos, block_state_info * cur_info);

void
update_pane_shape(BlockPos pos,
        block_state_info * cur_info, int from_direction);

void
update_fence_shape(BlockPos pos,
        block_state_info * cur_info, int from_direction);

void
update_wall_shape(BlockPos pos,
        block_state_info * cur_info, int from_direction);

int
get_player_facing(entity_base * player);

int
is_wall(i32 block_type);

block_model
get_collision_model(u16 block_state, BlockPos pos);

support_model
get_support_model(u16 block_state);

int
get_water_level(u16 state);

int
is_water_source(u16 state);

int
is_full_water(u16 state);

void
push_direct_neighbour_block_updates(BlockPos pos,
        block_update_context * buc);

#endif
